#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const yargs = require("yargs");
const path = require("path");
const novel_downloader_1 = require("novel-downloader");
const log_1 = require("../lib/log");
const PACKAGE_JSON = require("../package.json");
const updateNotifier = require("update-notifier");
let cli = yargs
    .option('outputDir', {
    alias: ['o'],
    requiresArg: true,
    normalize: true,
    desc: `用來儲存下載的內容的主資料夾`,
    type: "string",
    default: process.cwd(),
})
    .option('siteID', {
    desc: `網站模組名稱`,
    alias: ['s'],
    requiresArg: true,
    type: "string",
})
    .option('disableTxtdownload', {
    desc: `此選項目前僅適用於 Syosetu 小說家網站`,
    type: "boolean",
    default: true,
})
    .option('disableDownload', {
    desc: `不下載小說內容僅生成檔案結構`,
    type: "boolean",
})
    .command('list', '顯示出目前的模組名稱', function (args) {
    log_1.default.log(Object.keys(novel_downloader_1.EnumNovelSiteList).filter(v => /^[a-z]/i.test(v)));
    process.exit();
    return args;
})
    .argv;
let url = cli._[0];
checkUpdateSelf().notify();
if (!url) {
    yargs.showHelp();
}
else {
    let downloadOptions = {};
    let siteOptions = {};
    ({ downloadOptions, siteOptions } = fixOptions(cli, downloadOptions, siteOptions));
    log_1.default.dir({
        cli,
        downloadOptions,
        siteOptions,
    });
    __1.download(url, downloadOptions, cli.siteID, siteOptions)
        .tap(function (novel) {
        log_1.default.success(novel.novel_title);
    })
        .tapCatch(function () {
        yargs.showHelp();
    });
}
function fixOptions(cli, downloadOptions, siteOptions) {
    if (cli.outputDir) {
        let s1 = path.normalize(cli.outputDir);
        [
            __dirname,
            path.join(__dirname, '..'),
        ].some(function (v) {
            let s2 = path.normalize(v);
            if (s1 == s2) {
                cli.outputDir = path.join(__dirname, '..', 'test/temp');
                return true;
            }
        });
    }
    // @ts-ignore
    downloadOptions.disableTxtdownload = cli.disableTxtdownload;
    downloadOptions.disableDownload = cli.disableDownload;
    siteOptions.outputDir = cli.outputDir;
    return { cli, downloadOptions, siteOptions };
}
function checkUpdateSelf() {
    let data = updateNotifier({
        pkg: PACKAGE_JSON,
    });
    return data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm92ZWwtZG93bmxvYWRlci1jbGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub3ZlbC1kb3dubG9hZGVyLWNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwwQkFBOEI7QUFDOUIsK0JBQWdDO0FBQ2hDLDZCQUE4QjtBQUU5Qix1REFBc0Y7QUFDdEYsb0NBQWlDO0FBQ2pDLGdEQUFpRDtBQUNqRCxrREFBbUQ7QUFFbkQsSUFBSSxHQUFHLEdBQUcsS0FBSztLQUNiLE1BQU0sQ0FBQyxXQUFXLEVBQUU7SUFDcEIsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ1osV0FBVyxFQUFFLElBQUk7SUFDakIsU0FBUyxFQUFFLElBQUk7SUFDZixJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLElBQUksRUFBRSxRQUFRO0lBQ2QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsQ0FBQztLQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7SUFDakIsSUFBSSxFQUFFLFFBQVE7SUFDZCxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDWixXQUFXLEVBQUUsSUFBSTtJQUNqQixJQUFJLEVBQUUsUUFBUTtDQUNkLENBQUM7S0FDRCxNQUFNLENBQUMsb0JBQW9CLEVBQUU7SUFDN0IsSUFBSSxFQUFFLHlCQUF5QjtJQUMvQixJQUFJLEVBQUUsU0FBUztJQUNmLE9BQU8sRUFBRSxJQUFJO0NBQ2IsQ0FBQztLQUNELE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtJQUMxQixJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLElBQUksRUFBRSxTQUFTO0NBQ2YsQ0FBQztLQUNELE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsSUFBSTtJQUU1QyxhQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0NBQWlCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFZixPQUFPLElBQUksQ0FBQTtBQUNaLENBQUMsQ0FBQztLQUNELElBQTJCLENBQzVCO0FBVUQsSUFBSSxHQUFHLEdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUzQixlQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUUzQixJQUFJLENBQUMsR0FBRyxFQUNSO0lBQ0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ2pCO0tBRUQ7SUFDQyxJQUFJLGVBQWUsR0FBK0IsRUFBRSxDQUFDO0lBQ3JELElBQUksV0FBVyxHQUF1QixFQUFFLENBQUM7SUFFekMsQ0FBQyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBRW5GLGFBQU8sQ0FBQyxHQUFHLENBQUM7UUFDWCxHQUFHO1FBQ0gsZUFBZTtRQUNmLFdBQVc7S0FDWCxDQUFDLENBQUM7SUFFSCxZQUFRLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQztTQUNyRCxHQUFHLENBQUMsVUFBVSxLQUFLO1FBRW5CLGFBQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQztTQUNELFFBQVEsQ0FBQztRQUVULEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FDRjtDQUNEO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBd0IsRUFBRSxlQUEyQyxFQUFFLFdBQStCO0lBRXpILElBQUksR0FBRyxDQUFDLFNBQVMsRUFDakI7UUFDQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2QztZQUNDLFNBQW1CO1lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztTQUMxQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFakIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQ1o7Z0JBQ0MsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7Z0JBQ3hELE9BQU8sSUFBSSxDQUFDO2FBQ1o7UUFDRixDQUFDLENBQUMsQ0FBQTtLQUNGO0lBRUQsYUFBYTtJQUNiLGVBQWUsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUMsa0JBQWtCLENBQUM7SUFDNUQsZUFBZSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDO0lBRXRELFdBQVcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUV0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsQ0FBQztBQUM5QyxDQUFDO0FBRUQsU0FBUyxlQUFlO0lBRXZCLElBQUksSUFBSSxHQUFHLGNBQWMsQ0FBQztRQUN6QixHQUFHLEVBQUUsWUFBWTtLQUNqQixDQUFDLENBQUM7SUFFSCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCB7IGRvd25sb2FkIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHlhcmdzID0gcmVxdWlyZShcInlhcmdzXCIpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmltcG9ydCB7IEFyZ3VtZW50cyB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCByZXF1aXJlTm92ZWxTaXRlQ2xhc3MsIHsgRW51bU5vdmVsU2l0ZUxpc3QsIE5vdmVsU2l0ZSB9IGZyb20gXCJub3ZlbC1kb3dubG9hZGVyXCJcbmltcG9ydCBjb25zb2xlIGZyb20gJy4uL2xpYi9sb2cnO1xuaW1wb3J0IFBBQ0tBR0VfSlNPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuaW1wb3J0IHVwZGF0ZU5vdGlmaWVyID0gcmVxdWlyZSgndXBkYXRlLW5vdGlmaWVyJyk7XG5cbmxldCBjbGkgPSB5YXJnc1xuXHQub3B0aW9uKCdvdXRwdXREaXInLCB7XG5cdFx0YWxpYXM6IFsnbyddLFxuXHRcdHJlcXVpcmVzQXJnOiB0cnVlLFxuXHRcdG5vcm1hbGl6ZTogdHJ1ZSxcblx0XHRkZXNjOiBg55So5L6G5YSy5a2Y5LiL6LyJ55qE5YWn5a6555qE5Li76LOH5paZ5aS+YCxcblx0XHR0eXBlOiBcInN0cmluZ1wiLFxuXHRcdGRlZmF1bHQ6IHByb2Nlc3MuY3dkKCksXG5cdH0pXG5cdC5vcHRpb24oJ3NpdGVJRCcsIHtcblx0XHRkZXNjOiBg57ay56uZ5qih57WE5ZCN56ixYCxcblx0XHRhbGlhczogWydzJ10sXG5cdFx0cmVxdWlyZXNBcmc6IHRydWUsXG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0fSlcblx0Lm9wdGlvbignZGlzYWJsZVR4dGRvd25sb2FkJywge1xuXHRcdGRlc2M6IGDmraTpgbjpoIXnm67liY3lg4XpgannlKjmlrwgU3lvc2V0dSDlsI/oqqrlrrbntrLnq5lgLFxuXHRcdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRcdGRlZmF1bHQ6IHRydWUsXG5cdH0pXG5cdC5vcHRpb24oJ2Rpc2FibGVEb3dubG9hZCcsIHtcblx0XHRkZXNjOiBg5LiN5LiL6LyJ5bCP6Kqq5YWn5a655YOF55Sf5oiQ5qqU5qGI57WQ5qeLYCxcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0fSlcblx0LmNvbW1hbmQoJ2xpc3QnLCAn6aGv56S65Ye655uu5YmN55qE5qih57WE5ZCN56ixJywgZnVuY3Rpb24gKGFyZ3MpXG5cdHtcblx0XHRjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhFbnVtTm92ZWxTaXRlTGlzdCkuZmlsdGVyKHYgPT4gL15bYS16XS9pLnRlc3QodikpKTtcblxuXHRcdHByb2Nlc3MuZXhpdCgpO1xuXG5cdFx0cmV0dXJuIGFyZ3Ncblx0fSlcblx0LmFyZ3YgYXMgQXJndW1lbnRzPElDbGlBcmd2PlxuO1xuXG5pbnRlcmZhY2UgSUNsaUFyZ3Zcbntcblx0c2l0ZUlEPzogRW51bU5vdmVsU2l0ZUxpc3QsXG5cdG91dHB1dERpcj86IHN0cmluZyxcblx0ZGlzYWJsZVR4dGRvd25sb2FkPzogYm9vbGVhbixcblx0ZGlzYWJsZURvd25sb2FkPzogYm9vbGVhbixcbn1cblxubGV0IHVybDogc3RyaW5nID0gY2xpLl9bMF07XG5cbmNoZWNrVXBkYXRlU2VsZigpLm5vdGlmeSgpO1xuXG5pZiAoIXVybClcbntcblx0eWFyZ3Muc2hvd0hlbHAoKTtcbn1cbmVsc2Vcbntcblx0bGV0IGRvd25sb2FkT3B0aW9uczogTm92ZWxTaXRlLklEb3dubG9hZE9wdGlvbnMgPSB7fTtcblx0bGV0IHNpdGVPcHRpb25zOiBOb3ZlbFNpdGUuSU9wdGlvbnMgPSB7fTtcblxuXHQoeyBkb3dubG9hZE9wdGlvbnMsIHNpdGVPcHRpb25zIH0gPSBmaXhPcHRpb25zKGNsaSwgZG93bmxvYWRPcHRpb25zLCBzaXRlT3B0aW9ucykpO1xuXG5cdGNvbnNvbGUuZGlyKHtcblx0XHRjbGksXG5cdFx0ZG93bmxvYWRPcHRpb25zLFxuXHRcdHNpdGVPcHRpb25zLFxuXHR9KTtcblxuXHRkb3dubG9hZCh1cmwsIGRvd25sb2FkT3B0aW9ucywgY2xpLnNpdGVJRCwgc2l0ZU9wdGlvbnMpXG5cdFx0LnRhcChmdW5jdGlvbiAobm92ZWwpXG5cdFx0e1xuXHRcdFx0Y29uc29sZS5zdWNjZXNzKG5vdmVsLm5vdmVsX3RpdGxlKTtcblx0XHR9KVxuXHRcdC50YXBDYXRjaChmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHlhcmdzLnNob3dIZWxwKCk7XG5cdFx0fSlcblx0O1xufVxuXG5mdW5jdGlvbiBmaXhPcHRpb25zKGNsaTogQXJndW1lbnRzPElDbGlBcmd2PiwgZG93bmxvYWRPcHRpb25zOiBOb3ZlbFNpdGUuSURvd25sb2FkT3B0aW9ucywgc2l0ZU9wdGlvbnM6IE5vdmVsU2l0ZS5JT3B0aW9ucylcbntcblx0aWYgKGNsaS5vdXRwdXREaXIpXG5cdHtcblx0XHRsZXQgczEgPSBwYXRoLm5vcm1hbGl6ZShjbGkub3V0cHV0RGlyKTtcblxuXHRcdFtcblx0XHRcdF9fZGlybmFtZSBhcyBzdHJpbmcsXG5cdFx0XHRwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nKSxcblx0XHRdLnNvbWUoZnVuY3Rpb24gKHYpXG5cdFx0e1xuXHRcdFx0bGV0IHMyID0gcGF0aC5ub3JtYWxpemUodik7XG5cdFx0XHRpZiAoczEgPT0gczIpXG5cdFx0XHR7XG5cdFx0XHRcdGNsaS5vdXRwdXREaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAndGVzdC90ZW1wJyk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pXG5cdH1cblxuXHQvLyBAdHMtaWdub3JlXG5cdGRvd25sb2FkT3B0aW9ucy5kaXNhYmxlVHh0ZG93bmxvYWQgPSBjbGkuZGlzYWJsZVR4dGRvd25sb2FkO1xuXHRkb3dubG9hZE9wdGlvbnMuZGlzYWJsZURvd25sb2FkID0gY2xpLmRpc2FibGVEb3dubG9hZDtcblxuXHRzaXRlT3B0aW9ucy5vdXRwdXREaXIgPSBjbGkub3V0cHV0RGlyO1xuXG5cdHJldHVybiB7IGNsaSwgZG93bmxvYWRPcHRpb25zLCBzaXRlT3B0aW9ucyB9O1xufVxuXG5mdW5jdGlvbiBjaGVja1VwZGF0ZVNlbGYoKVxue1xuXHRsZXQgZGF0YSA9IHVwZGF0ZU5vdGlmaWVyKHtcblx0XHRwa2c6IFBBQ0tBR0VfSlNPTixcblx0fSk7XG5cblx0cmV0dXJuIGRhdGE7XG59XG4iXX0=