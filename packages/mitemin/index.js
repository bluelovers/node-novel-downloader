"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by user on 2020/1/6.
 */
const lazy_url_1 = require("lazy-url");
function parse(input) {
    let u = new lazy_url_1.default(input);
    if (!/\.mitemin/.test(u.host)) {
        throw new Error(`not support host ${u.host}`);
    }
    let subdomain = u.host.split('.')[0];
    if (/^img/.test(subdomain)) {
        let basename = u.paths[u.paths.length - 1];
        let m = basename.match(/^(?<filename>.+)(?:\.(?<size>\d+)\.(?:jpg|png|gif|bmp))?$/);
        let { filename, size } = m.groups;
        let u2 = new lazy_url_1.default(u);
        let paths = u2.paths.slice();
        paths[paths.length - 1] = filename;
        u2.pathname = paths.join('/');
        return {
            url: u.toString(),
            fullsize: u2.toString(),
            size,
            filename,
        };
    }
    else if (u.pathname.match(/\bviewimage(?<size>big)?\/icode\/(?<icode>\w+)/)) {
        let size = RegExp.$1;
        let icode = RegExp.$2;
        let u2 = new lazy_url_1.default(u);
        let paths = u2.paths.slice();
        paths.map(v => {
            if (/^(viewimage)(?:big)?$/.test(v)) {
                return RegExp.$1;
            }
            return v;
        });
        u2.pathname = paths.join('/');
        return {
            url: u.toString(),
            fullsize: u2.toString(),
            size,
            icode,
        };
    }
    throw new Error(`unknown url ${u.toString()}`);
}
exports.parse = parse;
async function parseAsync(input) {
    return parse(input);
}
exports.parseAsync = parseAsync;
exports.default = parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsdUNBQStCO0FBRS9CLFNBQWdCLEtBQUssQ0FBQyxLQUFtQjtJQUV4QyxJQUFJLENBQUMsR0FBRyxJQUFJLGtCQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUM3QjtRQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzlDO0lBRUQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUMxQjtRQUNDLElBQUksUUFBUSxHQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO1FBRXBGLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVsQyxJQUFJLEVBQUUsR0FBRyxJQUFJLGtCQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7UUFFbkMsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLE9BQU87WUFDTixHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNqQixRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUN2QixJQUFJO1lBQ0osUUFBUTtTQUNSLENBQUE7S0FDRDtTQUNJLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsZ0RBQWdELENBQUMsRUFDM0U7UUFDQyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3JCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFdEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxrQkFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNiLElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNuQztnQkFDQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUM7YUFDakI7WUFFRCxPQUFPLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLE9BQU87WUFDTixHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNqQixRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUN2QixJQUFJO1lBQ0osS0FBSztTQUNMLENBQUE7S0FDRDtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUE3REQsc0JBNkRDO0FBRU0sS0FBSyxVQUFVLFVBQVUsQ0FBQyxLQUFtQjtJQUVuRCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNwQixDQUFDO0FBSEQsZ0NBR0M7QUFFRCxrQkFBZSxLQUFLLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDIwLzEvNi5cbiAqL1xuaW1wb3J0IExhenlVUkwgZnJvbSAnbGF6eS11cmwnO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQ6IHN0cmluZyB8IFVSTClcbntcblx0bGV0IHUgPSBuZXcgTGF6eVVSTChpbnB1dCk7XG5cblx0aWYgKCEvXFwubWl0ZW1pbi8udGVzdCh1Lmhvc3QpKVxuXHR7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydCBob3N0ICR7dS5ob3N0fWApO1xuXHR9XG5cblx0bGV0IHN1YmRvbWFpbiA9IHUuaG9zdC5zcGxpdCgnLicpWzBdO1xuXG5cdGlmICgvXmltZy8udGVzdChzdWJkb21haW4pKVxuXHR7XG5cdFx0bGV0IGJhc2VuYW1lOiBzdHJpbmcgPSB1LnBhdGhzW3UucGF0aHMubGVuZ3RoIC0gMV07XG5cblx0XHRsZXQgbSA9IGJhc2VuYW1lLm1hdGNoKC9eKD88ZmlsZW5hbWU+LispKD86XFwuKD88c2l6ZT5cXGQrKVxcLig/OmpwZ3xwbmd8Z2lmfGJtcCkpPyQvKTtcblxuXHRcdGxldCB7IGZpbGVuYW1lLCBzaXplIH0gPSBtLmdyb3VwcztcblxuXHRcdGxldCB1MiA9IG5ldyBMYXp5VVJMKHUpO1xuXG5cdFx0bGV0IHBhdGhzID0gdTIucGF0aHMuc2xpY2UoKTtcblx0XHRwYXRoc1twYXRocy5sZW5ndGggLSAxXSA9IGZpbGVuYW1lO1xuXG5cdFx0dTIucGF0aG5hbWUgPSBwYXRocy5qb2luKCcvJyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dXJsOiB1LnRvU3RyaW5nKCksXG5cdFx0XHRmdWxsc2l6ZTogdTIudG9TdHJpbmcoKSxcblx0XHRcdHNpemUsXG5cdFx0XHRmaWxlbmFtZSxcblx0XHR9XG5cdH1cblx0ZWxzZSBpZiAodS5wYXRobmFtZS5tYXRjaCgvXFxidmlld2ltYWdlKD88c2l6ZT5iaWcpP1xcL2ljb2RlXFwvKD88aWNvZGU+XFx3KykvKSlcblx0e1xuXHRcdGxldCBzaXplID0gUmVnRXhwLiQxO1xuXHRcdGxldCBpY29kZSA9IFJlZ0V4cC4kMjtcblxuXHRcdGxldCB1MiA9IG5ldyBMYXp5VVJMKHUpO1xuXG5cdFx0bGV0IHBhdGhzID0gdTIucGF0aHMuc2xpY2UoKTtcblx0XHRwYXRocy5tYXAodiA9PiB7XG5cdFx0XHRpZiAoL14odmlld2ltYWdlKSg/OmJpZyk/JC8udGVzdCh2KSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIFJlZ0V4cC4kMTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHY7XG5cdFx0fSk7XG5cblx0XHR1Mi5wYXRobmFtZSA9IHBhdGhzLmpvaW4oJy8nKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR1cmw6IHUudG9TdHJpbmcoKSxcblx0XHRcdGZ1bGxzaXplOiB1Mi50b1N0cmluZygpLFxuXHRcdFx0c2l6ZSxcblx0XHRcdGljb2RlLFxuXHRcdH1cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihgdW5rbm93biB1cmwgJHt1LnRvU3RyaW5nKCl9YCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUFzeW5jKGlucHV0OiBzdHJpbmcgfCBVUkwpXG57XG5cdHJldHVybiBwYXJzZShpbnB1dClcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VcbiJdfQ==