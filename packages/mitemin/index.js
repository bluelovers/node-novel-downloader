"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by user on 2020/1/6.
 */
const lazy_url_1 = require("lazy-url");
function parse(input) {
    let u = new lazy_url_1.default(input);
    if (!/\.mitemin/.test(u.host)) {
        throw new Error(`not support host ${u.host}`);
    }
    let subdomain = u.host.split('.')[0];
    if (/^img/.test(subdomain)) {
        let basename = u.paths[u.paths.length - 1];
        let m = basename.match(/^(?<filename>.+?)(?:\.(?<size>\d+)\.(?:jpg|png|gif|bmp))?$/);
        let { filename, size } = m.groups;
        let u2 = new lazy_url_1.default(u);
        let paths = u2.paths.slice();
        paths[paths.length - 1] = filename;
        u2.pathname = paths.join('/');
        return {
            url: u.toString(),
            fullsize: u2.toString(),
            size,
            filename,
        };
    }
    else if (u.pathname.match(/\bviewimage(?<size>big)?\/icode\/(?<icode>\w+)/)) {
        let size = RegExp.$1;
        let icode = RegExp.$2;
        let u2 = new lazy_url_1.default(u);
        let paths = u2.paths.slice();
        paths = paths.map(v => {
            if (/^(viewimage)(?:big)?$/.test(v)) {
                return RegExp.$1;
            }
            return v;
        });
        u2.pathname = paths.join('/');
        return {
            url: u.toString(),
            fullsize: u2.toString(),
            size,
            icode,
        };
    }
    throw new Error(`unknown url ${u.toString()}`);
}
exports.parse = parse;
async function parseAsync(input) {
    return parse(input);
}
exports.parseAsync = parseAsync;
exports.default = parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsdUNBQStCO0FBRS9CLFNBQWdCLEtBQUssQ0FBQyxLQUFtQjtJQUV4QyxJQUFJLENBQUMsR0FBRyxJQUFJLGtCQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUM3QjtRQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzlDO0lBRUQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUMxQjtRQUNDLElBQUksUUFBUSxHQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBRXJGLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVsQyxJQUFJLEVBQUUsR0FBRyxJQUFJLGtCQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7UUFFbkMsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLE9BQU87WUFDTixHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNqQixRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUN2QixJQUFJO1lBQ0osUUFBUTtTQUNSLENBQUE7S0FDRDtTQUNJLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsZ0RBQWdELENBQUMsRUFDM0U7UUFDQyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3JCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFdEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxrQkFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckIsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ25DO2dCQUNDLE9BQU8sTUFBTSxDQUFDLEVBQUUsQ0FBQzthQUNqQjtZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsT0FBTztZQUNOLEdBQUcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ2pCLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLElBQUk7WUFDSixLQUFLO1NBQ0wsQ0FBQTtLQUNEO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQTdERCxzQkE2REM7QUFFTSxLQUFLLFVBQVUsVUFBVSxDQUFDLEtBQW1CO0lBRW5ELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3BCLENBQUM7QUFIRCxnQ0FHQztBQUVELGtCQUFlLEtBQUssQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMjAvMS82LlxuICovXG5pbXBvcnQgTGF6eVVSTCBmcm9tICdsYXp5LXVybCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShpbnB1dDogc3RyaW5nIHwgVVJMKVxue1xuXHRsZXQgdSA9IG5ldyBMYXp5VVJMKGlucHV0KTtcblxuXHRpZiAoIS9cXC5taXRlbWluLy50ZXN0KHUuaG9zdCkpXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0IGhvc3QgJHt1Lmhvc3R9YCk7XG5cdH1cblxuXHRsZXQgc3ViZG9tYWluID0gdS5ob3N0LnNwbGl0KCcuJylbMF07XG5cblx0aWYgKC9eaW1nLy50ZXN0KHN1YmRvbWFpbikpXG5cdHtcblx0XHRsZXQgYmFzZW5hbWU6IHN0cmluZyA9IHUucGF0aHNbdS5wYXRocy5sZW5ndGggLSAxXTtcblxuXHRcdGxldCBtID0gYmFzZW5hbWUubWF0Y2goL14oPzxmaWxlbmFtZT4uKz8pKD86XFwuKD88c2l6ZT5cXGQrKVxcLig/OmpwZ3xwbmd8Z2lmfGJtcCkpPyQvKTtcblxuXHRcdGxldCB7IGZpbGVuYW1lLCBzaXplIH0gPSBtLmdyb3VwcztcblxuXHRcdGxldCB1MiA9IG5ldyBMYXp5VVJMKHUpO1xuXG5cdFx0bGV0IHBhdGhzID0gdTIucGF0aHMuc2xpY2UoKTtcblx0XHRwYXRoc1twYXRocy5sZW5ndGggLSAxXSA9IGZpbGVuYW1lO1xuXG5cdFx0dTIucGF0aG5hbWUgPSBwYXRocy5qb2luKCcvJyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dXJsOiB1LnRvU3RyaW5nKCksXG5cdFx0XHRmdWxsc2l6ZTogdTIudG9TdHJpbmcoKSxcblx0XHRcdHNpemUsXG5cdFx0XHRmaWxlbmFtZSxcblx0XHR9XG5cdH1cblx0ZWxzZSBpZiAodS5wYXRobmFtZS5tYXRjaCgvXFxidmlld2ltYWdlKD88c2l6ZT5iaWcpP1xcL2ljb2RlXFwvKD88aWNvZGU+XFx3KykvKSlcblx0e1xuXHRcdGxldCBzaXplID0gUmVnRXhwLiQxO1xuXHRcdGxldCBpY29kZSA9IFJlZ0V4cC4kMjtcblxuXHRcdGxldCB1MiA9IG5ldyBMYXp5VVJMKHUpO1xuXG5cdFx0bGV0IHBhdGhzID0gdTIucGF0aHMuc2xpY2UoKTtcblx0XHRwYXRocyA9IHBhdGhzLm1hcCh2ID0+IHtcblx0XHRcdGlmICgvXih2aWV3aW1hZ2UpKD86YmlnKT8kLy50ZXN0KHYpKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gUmVnRXhwLiQxO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdjtcblx0XHR9KTtcblxuXHRcdHUyLnBhdGhuYW1lID0gcGF0aHMuam9pbignLycpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHVybDogdS50b1N0cmluZygpLFxuXHRcdFx0ZnVsbHNpemU6IHUyLnRvU3RyaW5nKCksXG5cdFx0XHRzaXplLFxuXHRcdFx0aWNvZGUsXG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHVybCAke3UudG9TdHJpbmcoKX1gKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhcnNlQXN5bmMoaW5wdXQ6IHN0cmluZyB8IFVSTClcbntcblx0cmV0dXJuIHBhcnNlKGlucHV0KVxufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZVxuIl19