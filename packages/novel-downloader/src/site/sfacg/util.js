"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("../../util/url");
function check(url, options) {
    return /book\.sfacg/i.test(url_1.default(url).hostname || '');
}
exports.check = check;
function makeUrl(urlobj, bool, ...argv) {
    let url;
    if (bool < 0) {
        url = `http://book.sfacg.com/Novel/${urlobj.novel_id}/`;
    }
    else if (urlobj.chapter_vip && urlobj.chapter_id) {
        url = `http://book.sfacg.com/vip/c/${urlobj.chapter_id}/`;
    }
    else {
        let cid = (!bool && urlobj.chapter_id) ? [urlobj.novel_pid, urlobj.chapter_id].join('/') : 'MainIndex';
        url = `http://book.sfacg.com/Novel/${urlobj.novel_id}/${cid}/`;
    }
    return url_1.default(url);
}
exports.makeUrl = makeUrl;
function parseUrl(_url, ...argv) {
    const { urlobj, url } = url_1._handleParseURL(_url, ...argv);
    let r;
    let m;
    r = /book\.sfacg\.com\/Novel\/(\d+)\/(?:(\d+)\/(\d+))/;
    m = r.exec(url);
    if (m) {
        urlobj.novel_pid = m[2];
        urlobj.novel_id = m[1];
        urlobj.chapter_id = m[3];
        return urlobj;
    }
    r = /book\.sfacg\.com\/Novel\/(\d+)\/(?:MainIndex)?/;
    if (m = r.exec(url)) {
        urlobj.novel_id = m[1];
        return urlobj;
    }
    r = /book\.sfacg\.com\/vip\/c\/(\d+)/;
    if (m = r.exec(url)) {
        urlobj.chapter_id = m[1];
        urlobj.chapter_vip = true;
        return urlobj;
    }
    return urlobj;
}
exports.parseUrl = parseUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx3Q0FBOEU7QUFFOUUsU0FBZ0IsS0FBSyxDQUFDLEdBQXVDLEVBQUUsT0FBUTtJQUV0RSxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBUyxDQUFDLEdBQVUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNsRSxDQUFDO0FBSEQsc0JBR0M7QUFFRCxTQUFnQixPQUFPLENBQUMsTUFBMkIsRUFBRSxJQUF3QixFQUFFLEdBQUcsSUFBSTtJQUVyRixJQUFJLEdBQVcsQ0FBQztJQUVoQixJQUFJLElBQUksR0FBRyxDQUFDLEVBQ1o7UUFDQyxHQUFHLEdBQUcsK0JBQStCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQztLQUN4RDtTQUNJLElBQUksTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUNoRDtRQUNDLEdBQUcsR0FBRywrQkFBK0IsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDO0tBQzFEO1NBRUQ7UUFDQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUV2RyxHQUFHLEdBQUcsK0JBQStCLE1BQU0sQ0FBQyxRQUFRLElBQUksR0FBRyxHQUFHLENBQUM7S0FDL0Q7SUFFRCxPQUFPLGFBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBcEJELDBCQW9CQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxJQUEyQixFQUFFLEdBQUcsSUFBSTtJQUU1RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLHFCQUFlLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFdkQsSUFBSSxDQUFTLENBQUM7SUFDZCxJQUFJLENBQWtCLENBQUM7SUFFdkIsQ0FBQyxHQUFHLGtEQUFrRCxDQUFDO0lBQ3ZELENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksQ0FBQyxFQUNMO1FBQ0MsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekIsT0FBTyxNQUFNLENBQUM7S0FDZDtJQUVELENBQUMsR0FBRyxnREFBZ0QsQ0FBQztJQUNyRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNuQjtRQUNDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZCLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7SUFFRCxDQUFDLEdBQUcsaUNBQWlDLENBQUM7SUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDbkI7UUFDQyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUUxQixPQUFPLE1BQU0sQ0FBQztLQUNkO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBcENELDRCQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIE5vdmVsU2l0ZSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgY3JlYXRlVVJMLCB7IF9oYW5kbGVQYXJzZVVSTCwgSVBhcnNlVXJsUnVudGltZSB9IGZyb20gJy4uLy4uL3V0aWwvdXJsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrKHVybDogc3RyaW5nIHwgVVJMIHwgTm92ZWxTaXRlLklQYXJzZVVybCwgb3B0aW9ucz8pOiBib29sZWFuXG57XG5cdHJldHVybiAvYm9va1xcLnNmYWNnL2kudGVzdChjcmVhdGVVUkwodXJsIGFzIGFueSkuaG9zdG5hbWUgfHwgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVVybCh1cmxvYmo6IE5vdmVsU2l0ZS5JUGFyc2VVcmwsIGJvb2wgPzogYm9vbGVhbiB8IG51bWJlciwgLi4uYXJndilcbntcblx0bGV0IHVybDogc3RyaW5nO1xuXG5cdGlmIChib29sIDwgMClcblx0e1xuXHRcdHVybCA9IGBodHRwOi8vYm9vay5zZmFjZy5jb20vTm92ZWwvJHt1cmxvYmoubm92ZWxfaWR9L2A7XG5cdH1cblx0ZWxzZSBpZiAodXJsb2JqLmNoYXB0ZXJfdmlwICYmIHVybG9iai5jaGFwdGVyX2lkKVxuXHR7XG5cdFx0dXJsID0gYGh0dHA6Ly9ib29rLnNmYWNnLmNvbS92aXAvYy8ke3VybG9iai5jaGFwdGVyX2lkfS9gO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGxldCBjaWQgPSAoIWJvb2wgJiYgdXJsb2JqLmNoYXB0ZXJfaWQpID8gW3VybG9iai5ub3ZlbF9waWQsIHVybG9iai5jaGFwdGVyX2lkXS5qb2luKCcvJykgOiAnTWFpbkluZGV4JztcblxuXHRcdHVybCA9IGBodHRwOi8vYm9vay5zZmFjZy5jb20vTm92ZWwvJHt1cmxvYmoubm92ZWxfaWR9LyR7Y2lkfS9gO1xuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVVSTCh1cmwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmwoX3VybDogc3RyaW5nIHwgVVJMIHwgbnVtYmVyLCAuLi5hcmd2KVxue1xuXHRjb25zdCB7IHVybG9iaiwgdXJsIH0gPSBfaGFuZGxlUGFyc2VVUkwoX3VybCwgLi4uYXJndik7XG5cblx0bGV0IHI6IFJlZ0V4cDtcblx0bGV0IG06IFJlZ0V4cEV4ZWNBcnJheTtcblxuXHRyID0gL2Jvb2tcXC5zZmFjZ1xcLmNvbVxcL05vdmVsXFwvKFxcZCspXFwvKD86KFxcZCspXFwvKFxcZCspKS87XG5cdG0gPSByLmV4ZWModXJsKTtcblx0aWYgKG0pXG5cdHtcblx0XHR1cmxvYmoubm92ZWxfcGlkID0gbVsyXTtcblx0XHR1cmxvYmoubm92ZWxfaWQgPSBtWzFdO1xuXHRcdHVybG9iai5jaGFwdGVyX2lkID0gbVszXTtcblxuXHRcdHJldHVybiB1cmxvYmo7XG5cdH1cblxuXHRyID0gL2Jvb2tcXC5zZmFjZ1xcLmNvbVxcL05vdmVsXFwvKFxcZCspXFwvKD86TWFpbkluZGV4KT8vO1xuXHRpZiAobSA9IHIuZXhlYyh1cmwpKVxuXHR7XG5cdFx0dXJsb2JqLm5vdmVsX2lkID0gbVsxXTtcblxuXHRcdHJldHVybiB1cmxvYmo7XG5cdH1cblxuXHRyID0gL2Jvb2tcXC5zZmFjZ1xcLmNvbVxcL3ZpcFxcL2NcXC8oXFxkKykvO1xuXHRpZiAobSA9IHIuZXhlYyh1cmwpKVxuXHR7XG5cdFx0dXJsb2JqLmNoYXB0ZXJfaWQgPSBtWzFdO1xuXHRcdHVybG9iai5jaGFwdGVyX3ZpcCA9IHRydWU7XG5cblx0XHRyZXR1cm4gdXJsb2JqO1xuXHR9XG5cblx0cmV0dXJuIHVybG9iajtcbn1cbiJdfQ==