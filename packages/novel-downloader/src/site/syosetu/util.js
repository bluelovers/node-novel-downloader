"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUrl = exports.makeUrl = exports.check = void 0;
const url_1 = require("../../util/url");
function check(url, options) {
    return /syosetu/i.test(url_1.default(url).hostname || '');
}
exports.check = check;
function makeUrl(urlobj, bool, ...argv) {
    let subdomain = urlobj.novel_r18 ? 'novel18' : 'ncode';
    if (urlobj.novel_pid && urlobj.chapter_id) {
        // @ts-ignore
        return new URL(`https://${subdomain}.syosetu.com/txtdownload/dlstart/ncode/${urlobj.novel_pid}/?no=${urlobj.chapter_id}&hankaku=0&code=utf-8&kaigyo=crlf`);
    }
    let pad = (!bool && urlobj.chapter_id) ? urlobj.chapter_id : '';
    let url = `http://${subdomain}.syosetu.com/${urlobj.novel_id}/${pad}`;
    return url_1.default(url);
}
exports.makeUrl = makeUrl;
function parseUrl(_url, ...argv) {
    const { urlobj, url } = url_1._handleParseURL(_url, ...argv);
    let r;
    let m;
    r = /^(n[\w]{5,6})$/;
    if (m = r.exec(url)) {
        urlobj.novel_id = m[1];
        return urlobj;
    }
    r = /(novel18)\.syosetu\.com/;
    if (m = r.exec(url)) {
        urlobj.novel_r18 = m[1];
    }
    r = /txtdownload\/dlstart\/ncode\/(\d+)/;
    if (m = r.exec(url)) {
        urlobj.novel_pid = m[1];
        return urlobj;
    }
    r = /\.syosetu\.com\/(n\w+)(?:\/?(\d+))?/;
    if (m = r.exec(url)) {
        urlobj.novel_id = m[1];
        urlobj.chapter_id = m[2];
        return urlobj;
    }
    return urlobj;
}
exports.parseUrl = parseUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQThFO0FBRTlFLFNBQWdCLEtBQUssQ0FBQyxHQUF1QyxFQUFFLE9BQVE7SUFFdEUsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQVMsQ0FBQyxHQUFVLENBQUMsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUhELHNCQUdDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLE1BQTJCLEVBQUUsSUFBd0IsRUFBRSxHQUFHLElBQUk7SUFFckYsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFFdkQsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQ3pDO1FBQ0MsYUFBYTtRQUNiLE9BQU8sSUFBSSxHQUFHLENBQUMsV0FBVyxTQUFTLDBDQUEwQyxNQUFNLENBQUMsU0FBUyxRQUFRLE1BQU0sQ0FBQyxVQUFVLG1DQUFtQyxDQUFDLENBQUM7S0FDM0o7SUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRWhFLElBQUksR0FBRyxHQUFXLFVBQVUsU0FBUyxnQkFBZ0IsTUFBTSxDQUFDLFFBQVEsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUU5RSxPQUFPLGFBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBZkQsMEJBZUM7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBMkIsRUFBRSxHQUFHLElBQUk7SUFFNUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxxQkFBZSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBRXZELElBQUksQ0FBUyxDQUFDO0lBQ2QsSUFBSSxDQUFrQixDQUFDO0lBRXZCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQztJQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNuQjtRQUNDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7SUFFRCxDQUFDLEdBQUcseUJBQXlCLENBQUM7SUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDbkI7UUFDQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QjtJQUVELENBQUMsR0FBRyxvQ0FBb0MsQ0FBQztJQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNuQjtRQUNDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhCLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7SUFFRCxDQUFDLEdBQUcscUNBQXFDLENBQUM7SUFDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDbkI7UUFDQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6QixPQUFPLE1BQU0sQ0FBQztLQUNkO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBdENELDRCQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIE5vdmVsU2l0ZSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgY3JlYXRlVVJMLCB7IF9oYW5kbGVQYXJzZVVSTCwgSVBhcnNlVXJsUnVudGltZSB9IGZyb20gJy4uLy4uL3V0aWwvdXJsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrKHVybDogc3RyaW5nIHwgVVJMIHwgTm92ZWxTaXRlLklQYXJzZVVybCwgb3B0aW9ucz8pOiBib29sZWFuXG57XG5cdHJldHVybiAvc3lvc2V0dS9pLnRlc3QoY3JlYXRlVVJMKHVybCBhcyBhbnkpLmhvc3RuYW1lIHx8ICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVcmwodXJsb2JqOiBOb3ZlbFNpdGUuSVBhcnNlVXJsLCBib29sID86IGJvb2xlYW4gfCBudW1iZXIsIC4uLmFyZ3YpXG57XG5cdGxldCBzdWJkb21haW4gPSB1cmxvYmoubm92ZWxfcjE4ID8gJ25vdmVsMTgnIDogJ25jb2RlJztcblxuXHRpZiAodXJsb2JqLm5vdmVsX3BpZCAmJiB1cmxvYmouY2hhcHRlcl9pZClcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRyZXR1cm4gbmV3IFVSTChgaHR0cHM6Ly8ke3N1YmRvbWFpbn0uc3lvc2V0dS5jb20vdHh0ZG93bmxvYWQvZGxzdGFydC9uY29kZS8ke3VybG9iai5ub3ZlbF9waWR9Lz9ubz0ke3VybG9iai5jaGFwdGVyX2lkfSZoYW5rYWt1PTAmY29kZT11dGYtOCZrYWlneW89Y3JsZmApO1xuXHR9XG5cblx0bGV0IHBhZCA9ICghYm9vbCAmJiB1cmxvYmouY2hhcHRlcl9pZCkgPyB1cmxvYmouY2hhcHRlcl9pZCA6ICcnO1xuXG5cdGxldCB1cmw6IHN0cmluZyA9IGBodHRwOi8vJHtzdWJkb21haW59LnN5b3NldHUuY29tLyR7dXJsb2JqLm5vdmVsX2lkfS8ke3BhZH1gO1xuXG5cdHJldHVybiBjcmVhdGVVUkwodXJsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKF91cmw6IHN0cmluZyB8IFVSTCB8IG51bWJlciwgLi4uYXJndik6IElQYXJzZVVybFJ1bnRpbWVcbntcblx0Y29uc3QgeyB1cmxvYmosIHVybCB9ID0gX2hhbmRsZVBhcnNlVVJMKF91cmwsIC4uLmFyZ3YpO1xuXG5cdGxldCByOiBSZWdFeHA7XG5cdGxldCBtOiBSZWdFeHBFeGVjQXJyYXk7XG5cblx0ciA9IC9eKG5bXFx3XXs1LDZ9KSQvO1xuXHRpZiAobSA9IHIuZXhlYyh1cmwpKVxuXHR7XG5cdFx0dXJsb2JqLm5vdmVsX2lkID0gbVsxXTtcblx0XHRyZXR1cm4gdXJsb2JqO1xuXHR9XG5cblx0ciA9IC8obm92ZWwxOClcXC5zeW9zZXR1XFwuY29tLztcblx0aWYgKG0gPSByLmV4ZWModXJsKSlcblx0e1xuXHRcdHVybG9iai5ub3ZlbF9yMTggPSBtWzFdO1xuXHR9XG5cblx0ciA9IC90eHRkb3dubG9hZFxcL2Rsc3RhcnRcXC9uY29kZVxcLyhcXGQrKS87XG5cdGlmIChtID0gci5leGVjKHVybCkpXG5cdHtcblx0XHR1cmxvYmoubm92ZWxfcGlkID0gbVsxXTtcblxuXHRcdHJldHVybiB1cmxvYmo7XG5cdH1cblxuXHRyID0gL1xcLnN5b3NldHVcXC5jb21cXC8oblxcdyspKD86XFwvPyhcXGQrKSk/Lztcblx0aWYgKG0gPSByLmV4ZWModXJsKSlcblx0e1xuXHRcdHVybG9iai5ub3ZlbF9pZCA9IG1bMV07XG5cdFx0dXJsb2JqLmNoYXB0ZXJfaWQgPSBtWzJdO1xuXG5cdFx0cmV0dXJuIHVybG9iajtcblx0fVxuXG5cdHJldHVybiB1cmxvYmo7XG59XG4iXX0=