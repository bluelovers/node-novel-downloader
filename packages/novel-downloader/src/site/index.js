"use strict";
/**
 * Created by user on 2018/2/10/010.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = require("../decorator/bluebird");
exports.bluebirdDecorator = bluebird_1.default;
//import bluebirdDecorator from 'bluebird-decorator';
const PromiseBluebird = require("bluebird");
exports.PromiseBluebird = PromiseBluebird;
const jsdom_url_1 = require("jsdom-url");
const path = require("upath2");
const _root_1 = require("../../_root");
const jsdom_1 = require("../jsdom");
exports.defaultJSDOMOptions = jsdom_1.defaultJSDOMOptions;
exports.createOptionsJSDOM = jsdom_1.createOptionsJSDOM;
const node_novel_info_1 = require("node-novel-info");
const fs_iconv_1 = require("fs-iconv");
//import * as moment from 'moment';
const moment = require("moment-timezone");
exports.moment = moment;
const util_1 = require("../util");
moment.fn.toJSON = function () { return this.format(); };
exports.SYMBOL_CACHE = Symbol.for('cache');
class NovelSite {
    constructor(options, ...argv) {
        if (!this.IDKEY) {
            throw new ReferenceError(`IDKEY is null`);
        }
        this.optionsInit = options;
        this.optionsInit.cwd = this.optionsInit.cwd || process.cwd();
        [this.PATH_NOVEL_MAIN, this.optionsInit] = this.getOutputDir(this.optionsInit);
    }
    static create(options, ...argv) {
        return new this(options, ...argv);
    }
    static check(url, options) {
        return false;
    }
    session(optionsRuntime, url) {
        optionsRuntime.optionsJSDOM = jsdom_1.createOptionsJSDOM(optionsRuntime.optionsJSDOM);
        if (url) {
            optionsRuntime[exports.SYMBOL_CACHE].url = url;
        }
        return this;
    }
    download(url, options) {
        throw new SyntaxError(`Function not implemented`);
    }
    get_volume_list(url, optionsRuntime = {}) {
        throw new SyntaxError(`Function not implemented`);
    }
    makeUrl(urlobj, options) {
        throw new SyntaxError(`Function not implemented`);
    }
    parseUrl(url, options) {
        throw new SyntaxError(`Function not implemented`);
    }
    getStatic() {
        // @ts-ignore
        return this.__proto__.constructor;
    }
    get IDKEY() {
        let key = this.getStatic().IDKEY;
        if (typeof key != 'string' || !key) {
            throw new SyntaxError(`IDKEY not implemented`);
        }
        return key;
    }
    getPathNovel(PATH_NOVEL_MAIN, novel) {
        return path.join(PATH_NOVEL_MAIN, `${this.trimFilenameNovel(novel.novel_title)}_(${novel.url_data.novel_id})`);
    }
    /**
     * 如果已經下載過 則試圖從 README.md 內讀取缺漏的下載設定
     *
     * @private
     */
    _loadExistsConf(inputUrl, optionsRuntime, novel, path_novel) {
        let file = path.resolve(path_novel, 'README.md');
        if (fs_iconv_1.default.pathExistsSync(file)) {
            let md = fs_iconv_1.default.readFileSync(file).toString();
            let conf = node_novel_info_1.default.parse(md, {
                lowCheckLevel: true,
                throw: false,
            });
            if (conf && conf.options && conf.options.downloadOptions) {
                Object.entries(conf.options.downloadOptions)
                    .forEach(function ([k, v]) {
                    if (optionsRuntime[k] == null) {
                        optionsRuntime[k] = v;
                    }
                });
            }
        }
    }
    getOutputDir(options, novelName) {
        options = Object.assign({}, this.optionsInit, options);
        if (!options.outputDir) {
            throw new ReferenceError(`options: outputDir is not set`);
        }
        let p = path.join(options.outputDir, options.disableOutputDirPrefix ? '' : this.IDKEY);
        if (!path.isAbsolute(p)) {
            p = path.join(options.cwd, p);
        }
        _root_1.default.disablePaths.concat(__dirname).forEach(function (dir) {
            if (p.indexOf(__dirname) == 0) {
                throw new ReferenceError(`path not allow "${p}"`);
            }
        });
        if (typeof novelName == 'string' || novelName) {
            if (!novelName) {
                throw new ReferenceError();
            }
            p = path.join(p, novelName);
        }
        options = this._fixOptionsRuntime(options);
        return [p, options];
    }
    _fixOptionsRuntime(optionsRuntime) {
        optionsRuntime[exports.SYMBOL_CACHE] = (optionsRuntime[exports.SYMBOL_CACHE] || {});
        optionsRuntime.startIndex = optionsRuntime.startIndex || 0;
        // @ts-ignore
        optionsRuntime.optionsJSDOM = jsdom_1.createOptionsJSDOM(optionsRuntime.optionsJSDOM);
        return optionsRuntime;
    }
    trimFilenameChapter(name) {
        return this.trimFilename(name);
    }
    trimFilenameVolume(name) {
        return this.trimFilename(name);
    }
    trimFilenameNovel(name) {
        return this.trimFilename(name);
    }
    trimFilename(name) {
        return fs_iconv_1.trimFilename(name);
    }
    _exportDownloadOptions(optionsRuntime) {
        return void (0);
    }
    _saveReadme(optionsRuntime, options = {}, ...opts) {
        const self = this;
        if (util_1.isUndef(optionsRuntime)
            || util_1.isUndef(optionsRuntime[exports.SYMBOL_CACHE], {})
            || util_1.isUndef(optionsRuntime[exports.SYMBOL_CACHE].novel, {})
            || util_1.isUndef(optionsRuntime[exports.SYMBOL_CACHE].path_novel, '')) {
            throw new ReferenceError(`saveReadme`);
        }
        const novel = optionsRuntime[exports.SYMBOL_CACHE].novel;
        const path_novel = optionsRuntime[exports.SYMBOL_CACHE].path_novel;
        let md = node_novel_info_1.default.stringify({
            novel: {
                tags: [
                    self.IDKEY,
                ],
                series: {
                    name: novel.novel_series_title || novel.novel_title || '',
                },
            },
            options,
            link: novel.link || [],
        }, novel, ...opts);
        let file = path.join(path_novel, `README.md`);
        return fs_iconv_1.default.outputFile(file, md)
            .then(function () {
            return {
                file,
                md,
            };
        });
    }
    createMainUrl(url) {
        let data = this.parseUrl(url);
        if (!data || !data.novel_id) {
            //console.log(data);
            throw new ReferenceError();
        }
        return this.makeUrl(data, true);
    }
    _createChapterUrl({ novel, volume, chapter, }, optionsRuntime) {
        // @ts-ignore
        return new jsdom_url_1.URL(chapter.chapter_url);
    }
    _fetchChapter(url, optionsRuntime) {
        throw new SyntaxError(`Function not implemented`);
    }
    _parseChapter(dom, optionsRuntime, cache) {
        throw new SyntaxError(`Function not implemented`);
    }
    _checkExists(optionsRuntime, file) {
        if (!optionsRuntime.disableCheckExists && fs_iconv_1.default.existsSync(file)) {
            let txt = fs_iconv_1.default.readFileSync(file);
            if (txt.toString().replace(/^\s+|\s+$/g, '')) {
                return true;
            }
        }
        return false;
    }
    emit(event, eventName, ...argv) {
        let bool = event.emit(eventName, this, ...argv);
        return [event, bool];
    }
}
NovelSite.IDKEY = null;
exports.NovelSite = NovelSite;
function staticImplements() {
    return (constructor) => { };
}
exports.staticImplements = staticImplements;
exports.default = NovelSite;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsb0RBQXNEO0FBNkI3Qyw0QkE3QkYsa0JBQWlCLENBNkJFO0FBNUIxQixxREFBcUQ7QUFFckQsNENBQTRDO0FBMEJoQiwwQ0FBZTtBQXpCM0MseUNBQWdDO0FBQ2hDLCtCQUErQjtBQUMvQix1Q0FBbUM7QUFHbkMsb0NBQXVIO0FBRTlHLDhCQUZBLDJCQUFtQixDQUVBO0FBQWtDLDZCQUZBLDBCQUFrQixDQUVBO0FBQ2hGLHFEQUF5RDtBQUl6RCx1Q0FBNEM7QUFFNUMsbUNBQW1DO0FBQ25DLDBDQUEwQztBQVFqQyx3QkFBTTtBQVBmLGtDQUFrQztBQUtsQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxjQUFjLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBTTVDLFFBQUEsWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFaEQsTUFBYSxTQUFTO0lBT3JCLFlBQVksT0FBMkIsRUFBRSxHQUFHLElBQUk7UUFFL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ2Y7WUFDQyxNQUFNLElBQUksY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTdELENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FB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QUFuVHNCLGVBQUssR0FBVyxJQUFJLENBQUM7QUFGN0MsOEJBc1RDO0FBNElELFNBQWdCLGdCQUFnQjtJQUUvQixPQUFPLENBQUMsV0FBYyxFQUFFLEVBQUUsR0FBRSxDQUFDLENBQUE7QUFDOUIsQ0FBQztBQUhELDRDQUdDO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8yLzEwLzAxMC5cbiAqL1xuXG5pbXBvcnQgYmx1ZWJpcmREZWNvcmF0b3IgZnJvbSAnLi4vZGVjb3JhdG9yL2JsdWViaXJkJztcbi8vaW1wb3J0IGJsdWViaXJkRGVjb3JhdG9yIGZyb20gJ2JsdWViaXJkLWRlY29yYXRvcic7XG5cbmltcG9ydCAqIGFzIFByb21pc2VCbHVlYmlyZCBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBVUkwgfSBmcm9tICdqc2RvbS11cmwnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwidXBhdGgyXCI7XG5pbXBvcnQgcm9vdFBhdGggZnJvbSBcIi4uLy4uL19yb290XCI7XG5pbXBvcnQgeyByZXRyeVJlcXVlc3QgfSBmcm9tICcuLi9mZXRjaCc7XG5cbmltcG9ydCB7IGRlZmF1bHRKU0RPTU9wdGlvbnMsIElGcm9tVXJsT3B0aW9ucywgSU9wdGlvbnNKU0RPTSwgY3JlYXRlT3B0aW9uc0pTRE9NLCBJTm92ZWxPcHRpb25zSlNET00gfSBmcm9tICcuLi9qc2RvbSc7XG5cbmV4cG9ydCB7IGRlZmF1bHRKU0RPTU9wdGlvbnMsIElGcm9tVXJsT3B0aW9ucywgSU9wdGlvbnNKU0RPTSwgY3JlYXRlT3B0aW9uc0pTRE9NIH1cbmltcG9ydCBub3ZlbEluZm8sIHsgSU1kY29uZk1ldGEgfSBmcm9tICdub2RlLW5vdmVsLWluZm8nO1xuZXhwb3J0IHsgSU1kY29uZk1ldGEgfVxuaW1wb3J0IHsgTGF6eUNvb2tpZSwgTGF6eUNvb2tpZUphciB9IGZyb20gJ2pzZG9tLWV4dHJhJztcblxuaW1wb3J0IGZzLCB7IHRyaW1GaWxlbmFtZSB9IGZyb20gJ2ZzLWljb252JztcblxuLy9pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQtdGltZXpvbmUnO1xuaW1wb3J0IHsgaXNVbmRlZiB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgKiBhcyBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IElEb3dubG9hZE9wdGlvbnMgfSBmcm9tICcuL2RlbW8vYmFzZSc7XG5cbm1vbWVudC5mbi50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZvcm1hdCgpOyB9O1xuXG5leHBvcnQgeyBtb21lbnQgfTtcblxuZXhwb3J0IHsgYmx1ZWJpcmREZWNvcmF0b3IsIFByb21pc2VCbHVlYmlyZCB9XG5cbmV4cG9ydCBjb25zdCBTWU1CT0xfQ0FDSEUgPSBTeW1ib2wuZm9yKCdjYWNoZScpO1xuXG5leHBvcnQgY2xhc3MgTm92ZWxTaXRlIGltcGxlbWVudHMgTm92ZWxTaXRlLklOb3ZlbFNpdGVcbntcblx0cHVibGljIHN0YXRpYyByZWFkb25seSBJREtFWTogc3RyaW5nID0gbnVsbDtcblxuXHRwdWJsaWMgUEFUSF9OT1ZFTF9NQUlOOiBzdHJpbmc7XG5cdHB1YmxpYyBvcHRpb25zSW5pdD86IE5vdmVsU2l0ZS5JT3B0aW9ucztcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBOb3ZlbFNpdGUuSU9wdGlvbnMsIC4uLmFyZ3YpXG5cdHtcblx0XHRpZiAoIXRoaXMuSURLRVkpXG5cdFx0e1xuXHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKGBJREtFWSBpcyBudWxsYCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zSW5pdCA9IG9wdGlvbnM7XG5cdFx0dGhpcy5vcHRpb25zSW5pdC5jd2QgPSB0aGlzLm9wdGlvbnNJbml0LmN3ZCB8fCBwcm9jZXNzLmN3ZCgpO1xuXG5cdFx0W3RoaXMuUEFUSF9OT1ZFTF9NQUlOLCB0aGlzLm9wdGlvbnNJbml0XSA9IHRoaXMuZ2V0T3V0cHV0RGlyKHRoaXMub3B0aW9uc0luaXQpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZShvcHRpb25zOiBOb3ZlbFNpdGUuSU9wdGlvbnMsIC4uLmFyZ3YpXG5cdHtcblx0XHRyZXR1cm4gbmV3IHRoaXMob3B0aW9ucywgLi4uYXJndik7XG5cdH1cblxuXHRzdGF0aWMgY2hlY2sodXJsOiBzdHJpbmcgfCBVUkwgfCBOb3ZlbFNpdGUuSVBhcnNlVXJsLCBvcHRpb25zPyk6IGJvb2xlYW5cblx0e1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHNlc3Npb248VCA9IE5vdmVsU2l0ZS5JT3B0aW9uc1J1bnRpbWU+KG9wdGlvbnNSdW50aW1lOiBUICYgTm92ZWxTaXRlLklPcHRpb25zUnVudGltZSwgdXJsPzogVVJMKVxuXHR7XG5cdFx0b3B0aW9uc1J1bnRpbWUub3B0aW9uc0pTRE9NID0gY3JlYXRlT3B0aW9uc0pTRE9NKG9wdGlvbnNSdW50aW1lLm9wdGlvbnNKU0RPTSk7XG5cblx0XHRpZiAodXJsKVxuXHRcdHtcblx0XHRcdG9wdGlvbnNSdW50aW1lW1NZTUJPTF9DQUNIRV0udXJsID0gdXJsO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZG93bmxvYWQodXJsOiBzdHJpbmcgfCBVUkwsIG9wdGlvbnM/OiBOb3ZlbFNpdGUuSURvd25sb2FkT3B0aW9ucyk6IFByb21pc2VCbHVlYmlyZDxOb3ZlbFNpdGUuSU5vdmVsPlxuXHR7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKGBGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWRgKTtcblx0fVxuXG5cdGdldF92b2x1bWVfbGlzdDxUID0gTm92ZWxTaXRlLklPcHRpb25zUnVudGltZT4odXJsOiBzdHJpbmcgfCBVUkwsXG5cdFx0b3B0aW9uc1J1bnRpbWU6IFBhcnRpYWw8VCAmIE5vdmVsU2l0ZS5JRG93bmxvYWRPcHRpb25zPiA9IHt9XG5cdCk6IFByb21pc2U8Tm92ZWxTaXRlLklOb3ZlbD5cblx0e1xuXHRcdHRocm93IG5ldyBTeW50YXhFcnJvcihgRnVuY3Rpb24gbm90IGltcGxlbWVudGVkYCk7XG5cdH1cblxuXHRtYWtlVXJsKHVybG9iajogTm92ZWxTaXRlLklQYXJzZVVybCwgb3B0aW9ucz8pOiBVUkxcblx0e1xuXHRcdHRocm93IG5ldyBTeW50YXhFcnJvcihgRnVuY3Rpb24gbm90IGltcGxlbWVudGVkYCk7XG5cdH1cblxuXHRwYXJzZVVybCh1cmw6IFVSTCB8IHN0cmluZywgb3B0aW9ucz8pOiBOb3ZlbFNpdGUuSVBhcnNlVXJsXG5cdHtcblx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoYEZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZGApO1xuXHR9XG5cblx0Z2V0U3RhdGljPFQgPSB0eXBlb2YgTm92ZWxTaXRlPigpOiBUXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIHRoaXMuX19wcm90b19fLmNvbnN0cnVjdG9yO1xuXHR9XG5cblx0Z2V0IElES0VZKCk6IHN0cmluZ1xuXHR7XG5cdFx0bGV0IGtleSA9IHRoaXMuZ2V0U3RhdGljKCkuSURLRVk7XG5cblx0XHRpZiAodHlwZW9mIGtleSAhPSAnc3RyaW5nJyB8fCAha2V5KVxuXHRcdHtcblx0XHRcdHRocm93IG5ldyBTeW50YXhFcnJvcihgSURLRVkgbm90IGltcGxlbWVudGVkYCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGtleTtcblx0fVxuXG5cdGdldFBhdGhOb3ZlbDxOIGV4dGVuZHMgTm92ZWxTaXRlLklOb3ZlbD4oUEFUSF9OT1ZFTF9NQUlOOiBzdHJpbmcsIG5vdmVsOiBOKVxuXHR7XG5cdFx0cmV0dXJuIHBhdGguam9pbihQQVRIX05PVkVMX01BSU4sXG5cdFx0XHRgJHt0aGlzLnRyaW1GaWxlbmFtZU5vdmVsKG5vdmVsLm5vdmVsX3RpdGxlKX1fKCR7bm92ZWwudXJsX2RhdGEubm92ZWxfaWR9KWBcblx0XHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIOWmguaenOW3sue2k+S4i+i8iemBjiDliYfoqablnJblvp4gUkVBRE1FLm1kIOWFp+iugOWPlue8uua8j+eahOS4i+i8ieioreWumlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2xvYWRFeGlzdHNDb25mPFQsIE4gZXh0ZW5kcyBOb3ZlbFNpdGUuSU5vdmVsPihpbnB1dFVybCwgb3B0aW9uc1J1bnRpbWU6IFQsIG5vdmVsOiBOLCBwYXRoX25vdmVsOiBzdHJpbmcpXG5cdHtcblx0XHRsZXQgZmlsZSA9IHBhdGgucmVzb2x2ZShwYXRoX25vdmVsLCAnUkVBRE1FLm1kJyk7XG5cblx0XHRpZiAoZnMucGF0aEV4aXN0c1N5bmMoZmlsZSkpXG5cdFx0e1xuXHRcdFx0bGV0IG1kID0gZnMucmVhZEZpbGVTeW5jKGZpbGUpLnRvU3RyaW5nKCk7XG5cblx0XHRcdGxldCBjb25mID0gbm92ZWxJbmZvLnBhcnNlKG1kLCB7XG5cdFx0XHRcdGxvd0NoZWNrTGV2ZWw6IHRydWUsXG5cdFx0XHRcdHRocm93OiBmYWxzZSxcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoY29uZiAmJiBjb25mLm9wdGlvbnMgJiYgY29uZi5vcHRpb25zLmRvd25sb2FkT3B0aW9ucylcblx0XHRcdHtcblx0XHRcdFx0T2JqZWN0LmVudHJpZXMoY29uZi5vcHRpb25zLmRvd25sb2FkT3B0aW9ucylcblx0XHRcdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAoW2ssIHZdKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zUnVudGltZVtrXSA9PSBudWxsKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zUnVudGltZVtrXSA9IHY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldE91dHB1dERpcjxUPihvcHRpb25zPzogVCAmIE5vdmVsU2l0ZS5JT3B0aW9ucywgbm92ZWxOYW1lPzogc3RyaW5nKTogW3N0cmluZywgVCAmIE5vdmVsU2l0ZS5JT3B0aW9uc11cblx0e1xuXHRcdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnNJbml0LCBvcHRpb25zKTtcblxuXHRcdGlmICghb3B0aW9ucy5vdXRwdXREaXIpXG5cdFx0e1xuXHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKGBvcHRpb25zOiBvdXRwdXREaXIgaXMgbm90IHNldGApO1xuXHRcdH1cblxuXHRcdGxldCBwID0gcGF0aC5qb2luKG9wdGlvbnMub3V0cHV0RGlyLCBvcHRpb25zLmRpc2FibGVPdXRwdXREaXJQcmVmaXggPyAnJyA6IHRoaXMuSURLRVkpO1xuXG5cdFx0aWYgKCFwYXRoLmlzQWJzb2x1dGUocCkpXG5cdFx0e1xuXHRcdFx0cCA9IHBhdGguam9pbihvcHRpb25zLmN3ZCwgcCk7XG5cdFx0fVxuXG5cdFx0cm9vdFBhdGguZGlzYWJsZVBhdGhzLmNvbmNhdChfX2Rpcm5hbWUpLmZvckVhY2goZnVuY3Rpb24gKGRpcilcblx0XHR7XG5cdFx0XHRpZiAocC5pbmRleE9mKF9fZGlybmFtZSkgPT0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKGBwYXRoIG5vdCBhbGxvdyBcIiR7cH1cImApXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAodHlwZW9mIG5vdmVsTmFtZSA9PSAnc3RyaW5nJyB8fCBub3ZlbE5hbWUpXG5cdFx0e1xuXHRcdFx0aWYgKCFub3ZlbE5hbWUpXG5cdFx0XHR7XG5cdFx0XHRcdHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigpO1xuXHRcdFx0fVxuXG5cdFx0XHRwID0gcGF0aC5qb2luKHAsIG5vdmVsTmFtZSk7XG5cdFx0fVxuXG5cdFx0b3B0aW9ucyA9IHRoaXMuX2ZpeE9wdGlvbnNSdW50aW1lKG9wdGlvbnMpO1xuXG5cdFx0cmV0dXJuIFtwLCBvcHRpb25zXTtcblx0fVxuXG5cdHByb3RlY3RlZCBfZml4T3B0aW9uc1J1bnRpbWU8VCA9IE5vdmVsU2l0ZS5JT3B0aW9uc1J1bnRpbWU+KG9wdGlvbnNSdW50aW1lOiBUICYgTm92ZWxTaXRlLklPcHRpb25zUnVudGltZSk6IFQgJiBOb3ZlbFNpdGUuSU9wdGlvbnNSdW50aW1lXG5cdHtcblx0XHRvcHRpb25zUnVudGltZVtTWU1CT0xfQ0FDSEVdID0gKG9wdGlvbnNSdW50aW1lW1NZTUJPTF9DQUNIRV0gfHwge30pIGFzIHtcblx0XHRcdHVybD86IFVSTCxcblx0XHRcdHBhdGhfbm92ZWw/OiBzdHJpbmcsXG5cdFx0XHRub3ZlbD86IE5vdmVsU2l0ZS5JTm92ZWwsXG5cdFx0fTtcblxuXHRcdG9wdGlvbnNSdW50aW1lLnN0YXJ0SW5kZXggPSBvcHRpb25zUnVudGltZS5zdGFydEluZGV4IHx8IDA7XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0b3B0aW9uc1J1bnRpbWUub3B0aW9uc0pTRE9NID0gY3JlYXRlT3B0aW9uc0pTRE9NKG9wdGlvbnNSdW50aW1lLm9wdGlvbnNKU0RPTSk7XG5cblx0XHRyZXR1cm4gb3B0aW9uc1J1bnRpbWU7XG5cdH1cblxuXHR0cmltRmlsZW5hbWVDaGFwdGVyKG5hbWUpOiBzdHJpbmdcblx0e1xuXHRcdHJldHVybiB0aGlzLnRyaW1GaWxlbmFtZShuYW1lKTtcblx0fVxuXG5cdHRyaW1GaWxlbmFtZVZvbHVtZShuYW1lKTogc3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gdGhpcy50cmltRmlsZW5hbWUobmFtZSk7XG5cdH1cblxuXHR0cmltRmlsZW5hbWVOb3ZlbChuYW1lKTogc3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gdGhpcy50cmltRmlsZW5hbWUobmFtZSk7XG5cdH1cblxuXHR0cmltRmlsZW5hbWUobmFtZSk6IHN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIHRyaW1GaWxlbmFtZShuYW1lKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfZXhwb3J0RG93bmxvYWRPcHRpb25zKG9wdGlvbnNSdW50aW1lPzogSU9wdGlvbnNSdW50aW1lKTogYW55XG5cdHtcblx0XHRyZXR1cm4gdm9pZCgwKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfc2F2ZVJlYWRtZShvcHRpb25zUnVudGltZT86IElPcHRpb25zUnVudGltZSwgb3B0aW9ucyA9IHt9LCAuLi5vcHRzKVxuXHR7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoaXNVbmRlZihvcHRpb25zUnVudGltZSlcblx0XHRcdHx8IGlzVW5kZWYob3B0aW9uc1J1bnRpbWVbU1lNQk9MX0NBQ0hFXSwge30pXG5cblx0XHRcdHx8IGlzVW5kZWYob3B0aW9uc1J1bnRpbWVbU1lNQk9MX0NBQ0hFXS5ub3ZlbCwge30pXG5cdFx0XHR8fCBpc1VuZGVmKG9wdGlvbnNSdW50aW1lW1NZTUJPTF9DQUNIRV0ucGF0aF9ub3ZlbCwgJycpXG5cdFx0KVxuXHRcdHtcblx0XHRcdHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgc2F2ZVJlYWRtZWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IG5vdmVsID0gb3B0aW9uc1J1bnRpbWVbU1lNQk9MX0NBQ0hFXS5ub3ZlbDtcblx0XHRjb25zdCBwYXRoX25vdmVsID0gb3B0aW9uc1J1bnRpbWVbU1lNQk9MX0NBQ0hFXS5wYXRoX25vdmVsO1xuXG5cdFx0bGV0IG1kID0gbm92ZWxJbmZvLnN0cmluZ2lmeSh7XG5cdFx0XHRub3ZlbDoge1xuXHRcdFx0XHR0YWdzOiBbXG5cdFx0XHRcdFx0c2VsZi5JREtFWSxcblx0XHRcdFx0XSxcblx0XHRcdFx0c2VyaWVzOiB7XG5cdFx0XHRcdFx0bmFtZTogbm92ZWwubm92ZWxfc2VyaWVzX3RpdGxlIHx8IG5vdmVsLm5vdmVsX3RpdGxlIHx8ICcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdG9wdGlvbnMsXG5cblx0XHRcdGxpbms6IG5vdmVsLmxpbmsgfHwgW10sXG5cdFx0fSwgbm92ZWwsIC4uLm9wdHMpO1xuXG5cdFx0bGV0IGZpbGUgPSBwYXRoLmpvaW4ocGF0aF9ub3ZlbCwgYFJFQURNRS5tZGApO1xuXHRcdHJldHVybiBmcy5vdXRwdXRGaWxlKGZpbGUsIG1kKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKClcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRmaWxlLFxuXHRcdFx0XHRcdG1kLFxuXHRcdFx0XHR9O1xuXHRcdFx0fSlcblx0XHRcdDtcblx0fVxuXG5cdGNyZWF0ZU1haW5VcmwodXJsOiBzdHJpbmcpOiBVUkxcblx0Y3JlYXRlTWFpblVybCh1cmw6IFVSTCk6IFVSTFxuXHRjcmVhdGVNYWluVXJsKHVybClcblx0e1xuXHRcdGxldCBkYXRhID0gdGhpcy5wYXJzZVVybCh1cmwpO1xuXG5cdFx0aWYgKCFkYXRhIHx8ICFkYXRhLm5vdmVsX2lkKVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5sb2coZGF0YSk7XG5cblx0XHRcdHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm1ha2VVcmwoZGF0YSwgdHJ1ZSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2NyZWF0ZUNoYXB0ZXJVcmw8VCA9IElPcHRpb25zUnVudGltZT4oe1xuXHRcdG5vdmVsLFxuXHRcdHZvbHVtZSxcblx0XHRjaGFwdGVyLFxuXHR9OiB7XG5cdFx0bm92ZWw6IE5vdmVsU2l0ZS5JTm92ZWwsXG5cdFx0dm9sdW1lOiBOb3ZlbFNpdGUuSVZvbHVtZSxcblx0XHRjaGFwdGVyOiBOb3ZlbFNpdGUuSUNoYXB0ZXIsXG5cdH0sIG9wdGlvbnNSdW50aW1lPzogVCAmIElPcHRpb25zUnVudGltZSk6IFVSTFxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBuZXcgVVJMKGNoYXB0ZXIuY2hhcHRlcl91cmwpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9mZXRjaENoYXB0ZXI8VD4odXJsOiBVUkwsIG9wdGlvbnNSdW50aW1lOiBUICYgSU9wdGlvbnNSdW50aW1lKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKGBGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWRgKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfcGFyc2VDaGFwdGVyPFQ+KGRvbSwgb3B0aW9uc1J1bnRpbWU6IFQgJiBJT3B0aW9uc1J1bnRpbWUsIGNhY2hlOiB7XG5cdFx0ZmlsZTogc3RyaW5nLFxuXHRcdG5vdmVsOiBOb3ZlbFNpdGUuSU5vdmVsLFxuXHRcdHZvbHVtZTogTm92ZWxTaXRlLklWb2x1bWUsXG5cdFx0Y2hhcHRlcjogTm92ZWxTaXRlLklDaGFwdGVyLFxuXHR9KVxuXHR7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKGBGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWRgKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfY2hlY2tFeGlzdHMob3B0aW9uc1J1bnRpbWU6IElPcHRpb25zUnVudGltZSwgZmlsZTogc3RyaW5nKTogYm9vbGVhblxuXHR7XG5cdFx0aWYgKCFvcHRpb25zUnVudGltZS5kaXNhYmxlQ2hlY2tFeGlzdHMgJiYgZnMuZXhpc3RzU3luYyhmaWxlKSlcblx0XHR7XG5cdFx0XHRsZXQgdHh0ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUpO1xuXG5cdFx0XHRpZiAodHh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxuXG5cdHByb3RlY3RlZCBlbWl0KGV2ZW50OiBFdmVudEVtaXR0ZXIsIGV2ZW50TmFtZTogc3RyaW5nLCAuLi5hcmd2KVxuXHR7XG5cdFx0bGV0IGJvb2wgPSBldmVudC5lbWl0KGV2ZW50TmFtZSwgdGhpcywgLi4uYXJndik7XG5cdFx0cmV0dXJuIFtldmVudCwgYm9vbF07XG5cdH1cbn1cblxuZXhwb3J0IGltcG9ydCBJT3B0aW9uc1J1bnRpbWUgPSBOb3ZlbFNpdGUuSU9wdGlvbnNSdW50aW1lO1xuZXhwb3J0IGltcG9ydCBJVm9sdW1lID0gTm92ZWxTaXRlLklWb2x1bWU7XG5leHBvcnQgaW1wb3J0IElDaGFwdGVyID0gTm92ZWxTaXRlLklDaGFwdGVyO1xuXG5leHBvcnQgbmFtZXNwYWNlIE5vdmVsU2l0ZVxue1xuXHRleHBvcnQgdHlwZSBJT3B0aW9uc1BsdXMgPSB7XG5cblx0XHRkaXNhYmxlT3V0cHV0RGlyUHJlZml4PzogYm9vbGVhbixcblxuXHRcdG5vRGlyUHJlZml4PzogYm9vbGVhbixcblx0XHRub0RpclBhZGVuZD86IGJvb2xlYW4sXG5cblx0XHRub0ZpcmVQcmVmaXg/OiBib29sZWFuLFxuXHRcdG5vRmlsZVBhZGVuZD86IGJvb2xlYW4sXG5cblx0XHRyZXRyeURlbGF5PzogbnVtYmVyLFxuXHRcdHN0YXJ0SW5kZXg/OiBudW1iZXIsXG5cblx0XHRmaWxlUHJlZml4TW9kZT86IG51bWJlcixcblxuXHRcdGFsbG93RW1wdHlWb2x1bWVUaXRsZT86IGJvb2xlYW4sXG5cblx0XHRldmVudD86IEV2ZW50RW1pdHRlcixcblxuXHRcdC8qKlxuXHRcdCAqIOeUqOS+hueZu+WFpeermem7nueahCBjb29raWVzIHNlc3Npb25cblx0XHQgKi9cblx0XHRzZXNzaW9uRGF0YT86IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueSxcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICog5Y+q5oqT5Y+W5bCP6Kqq55qEIE1FVEEg6LOH5paZXG5cdFx0ICovXG5cdFx0ZmV0Y2hNZXRhRGF0YU9ubHk/OiBib29sZWFuLFxuXHR9XG5cblx0ZXhwb3J0IHR5cGUgSU9wdGlvbnMgPSB7XG5cblx0XHRvdXRwdXREaXI/OiBzdHJpbmcsXG5cdFx0Y3dkPzogc3RyaW5nLFxuXG5cdH0gJiBJT3B0aW9uc1BsdXM7XG5cblx0ZXhwb3J0IHR5cGUgSURvd25sb2FkT3B0aW9ucyA9IHtcblxuXHRcdC8qKlxuXHRcdCAqIOWPqueUoueUn+ebrumMhOe1kOaniyDkuI3kuIvovInlhaflrrlcblx0XHQgKi9cblx0XHRkaXNhYmxlRG93bmxvYWQ/OiBib29sZWFuLFxuXHRcdGRpc2FibGVDaGVja0V4aXN0cz86IGJvb2xlYW4sXG5cblx0XHRvcHRpb25zSlNET00/OiBJRnJvbVVybE9wdGlvbnMgJiBJT3B0aW9uc0pTRE9NICYge1xuXHRcdFx0Y29va2llSmFyPzogUGFydGlhbDxMYXp5Q29va2llSmFyPixcblx0XHR9LFxuXG5cdH0gJiBJT3B0aW9uc1BsdXM7XG5cblx0ZXhwb3J0IHR5cGUgSU9wdGlvbnNSdW50aW1lID0gSU9wdGlvbnMgJiBJRG93bmxvYWRPcHRpb25zICYgSU9wdGlvbnNQbHVzO1xuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlVXJsXG5cdHtcblx0XHR1cmw/OiBVUkwgfCBzdHJpbmcsXG5cblx0XHRub3ZlbF9waWQ/LFxuXHRcdG5vdmVsX2lkPyxcblx0XHRjaGFwdGVyX2lkPyxcblxuXHRcdG5vdmVsX3IxOD8sXG5cblx0XHRba2V5OiBzdHJpbmddOiBhbnksXG5cdH1cblxuXHRleHBvcnQgaW50ZXJmYWNlIElDaGFwdGVyXG5cdHtcblx0XHRjaGFwdGVyX2luZGV4PzogbnVtYmVyIHwgc3RyaW5nLFxuXHRcdGNoYXB0ZXJfdGl0bGU6IHN0cmluZyxcblx0XHRjaGFwdGVyX2lkP1xuXHRcdGNoYXB0ZXJfdXJsP1xuXHRcdGNoYXB0ZXJfdXJsX2RhdGE/XG5cdFx0Y2hhcHRlcl9kYXRlPzogbW9tZW50Lk1vbWVudCxcblxuXHRcdFtrZXk6IHN0cmluZ106IGFueSxcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSVZvbHVtZVxuXHR7XG5cdFx0dm9sdW1lX2luZGV4P1xuXHRcdHZvbHVtZV90aXRsZTogc3RyaW5nLFxuXHRcdGNoYXB0ZXJfbGlzdD86IElDaGFwdGVyW10sXG5cblx0XHRba2V5OiBzdHJpbmddOiBhbnksXG5cdH1cblxuXHRleHBvcnQgaW50ZXJmYWNlIElOb3ZlbFxuXHR7XG5cdFx0dXJsOiBVUkwgfCBzdHJpbmcsXG5cdFx0dXJsX2RhdGE6IElQYXJzZVVybCxcblxuXHRcdG5vdmVsX3RpdGxlOiBzdHJpbmcsXG5cdFx0bm92ZWxfYXV0aG9yPzogc3RyaW5nLFxuXG5cdFx0bm92ZWxfZGVzYz86IHN0cmluZyxcblx0XHRub3ZlbF9kYXRlPzogbW9tZW50Lk1vbWVudCxcblx0XHRub3ZlbF9wdWJsaXNoZXI/OiBzdHJpbmcsXG5cblx0XHRub3ZlbF9zZXJpZXNfdGl0bGU/OiBzdHJpbmcsXG5cblx0XHR2b2x1bWVfbGlzdDogSVZvbHVtZVtdLFxuXG5cdFx0Y2hlY2tkYXRlPzogbW9tZW50Lk1vbWVudCxcblxuXHRcdGltZ3M/OiBzdHJpbmdbXSxcblxuXHRcdFtrZXk6IHN0cmluZ106IGFueSxcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSU5vdmVsU2l0ZVN0YXRpYzxUPiBleHRlbmRzIFR5cGU8VCAmIE5vdmVsU2l0ZS5JTm92ZWxTaXRlPlxuXHR7XG5cdFx0SURLRVk6IHN0cmluZyxcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSU5vdmVsU2l0ZVxuXHR7XG5cdFx0ZG93bmxvYWQodXJsOiBzdHJpbmcgfCBVUkwsIG9wdGlvbnM/OiBJRG93bmxvYWRPcHRpb25zKTogUHJvbWlzZUJsdWViaXJkPE5vdmVsU2l0ZS5JTm92ZWw+O1xuXG5cdFx0bWFrZVVybCh1cmxvYmo6IE5vdmVsU2l0ZS5JUGFyc2VVcmwsIG9wdGlvbnM/KTogVVJMO1xuXG5cdFx0cGFyc2VVcmwodXJsOiBVUkwgfCBzdHJpbmcpOiBOb3ZlbFNpdGUuSVBhcnNlVXJsO1xuXHR9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZTxUPlxue1xuXHRuZXcgKG9wdGlvbnM6IE5vdmVsU2l0ZS5JT3B0aW9ucywgLi4uYXJnczogYW55W10pOiBUO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhdGljSW1wbGVtZW50czxUPigpXG57XG5cdHJldHVybiAoY29uc3RydWN0b3I6IFQpID0+IHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vdmVsU2l0ZTtcbiJdfQ==