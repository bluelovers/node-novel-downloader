"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EnumNovelSiteList;
(function (EnumNovelSiteList) {
    EnumNovelSiteList["NovelSiteAlphapolis"] = "alphapolis";
    EnumNovelSiteList["NovelSiteDemoBase"] = "demo/base";
    EnumNovelSiteList["NovelSiteDemoDemo"] = "demo/demo";
    EnumNovelSiteList["NovelSiteDemoTree"] = "demo/tree";
    EnumNovelSiteList["NovelSiteDmzjApi"] = "dmzj/api";
    EnumNovelSiteList["NovelSiteDmzj"] = "dmzj";
    EnumNovelSiteList["NovelSiteEsjzone"] = "esjzone";
    EnumNovelSiteList["NovelSiteHetubook"] = "hetubook";
    EnumNovelSiteList["NovelSiteIqing"] = "iqing";
    EnumNovelSiteList["NovelSiteKakuyomu"] = "kakuyomu";
    EnumNovelSiteList["NovelSiteMillionbook"] = "millionbook";
    EnumNovelSiteList["NovelSiteNovelba"] = "novelba";
    EnumNovelSiteList["NovelSiteNovelup"] = "novelup";
    EnumNovelSiteList["NovelSiteSfacg"] = "sfacg";
    EnumNovelSiteList["NovelSiteSyosetu"] = "syosetu";
    EnumNovelSiteList["NovelSiteUukanshu"] = "uukanshu";
    EnumNovelSiteList["NovelSiteWebqxs"] = "webqxs";
    EnumNovelSiteList["NovelSiteWenku8"] = "wenku8";
    EnumNovelSiteList["NovelSiteX23qb"] = "x23qb";
    EnumNovelSiteList["alphapolis"] = "alphapolis";
    EnumNovelSiteList["demo/base"] = "demo/base";
    EnumNovelSiteList["demo/demo"] = "demo/demo";
    EnumNovelSiteList["demo/tree"] = "demo/tree";
    EnumNovelSiteList["dmzj/api"] = "dmzj/api";
    EnumNovelSiteList["dmzj"] = "dmzj";
    EnumNovelSiteList["esjzone"] = "esjzone";
    EnumNovelSiteList["hetubook"] = "hetubook";
    EnumNovelSiteList["iqing"] = "iqing";
    EnumNovelSiteList["kakuyomu"] = "kakuyomu";
    EnumNovelSiteList["millionbook"] = "millionbook";
    EnumNovelSiteList["novelba"] = "novelba";
    EnumNovelSiteList["novelup"] = "novelup";
    EnumNovelSiteList["sfacg"] = "sfacg";
    EnumNovelSiteList["syosetu"] = "syosetu";
    EnumNovelSiteList["uukanshu"] = "uukanshu";
    EnumNovelSiteList["webqxs"] = "webqxs";
    EnumNovelSiteList["wenku8"] = "wenku8";
    EnumNovelSiteList["x23qb"] = "x23qb";
    EnumNovelSiteList["./site/alphapolis"] = "alphapolis";
    EnumNovelSiteList["./site/demo/base"] = "demo/base";
    EnumNovelSiteList["./site/demo/demo"] = "demo/demo";
    EnumNovelSiteList["./site/demo/tree"] = "demo/tree";
    EnumNovelSiteList["./site/dmzj/api"] = "dmzj/api";
    EnumNovelSiteList["./site/dmzj"] = "dmzj";
    EnumNovelSiteList["./site/esjzone"] = "esjzone";
    EnumNovelSiteList["./site/hetubook"] = "hetubook";
    EnumNovelSiteList["./site/iqing"] = "iqing";
    EnumNovelSiteList["./site/kakuyomu"] = "kakuyomu";
    EnumNovelSiteList["./site/millionbook"] = "millionbook";
    EnumNovelSiteList["./site/novelba"] = "novelba";
    EnumNovelSiteList["./site/novelup"] = "novelup";
    EnumNovelSiteList["./site/sfacg"] = "sfacg";
    EnumNovelSiteList["./site/syosetu"] = "syosetu";
    EnumNovelSiteList["./site/uukanshu"] = "uukanshu";
    EnumNovelSiteList["./site/webqxs"] = "webqxs";
    EnumNovelSiteList["./site/wenku8"] = "wenku8";
    EnumNovelSiteList["./site/x23qb"] = "x23qb";
})(EnumNovelSiteList = exports.EnumNovelSiteList || (exports.EnumNovelSiteList = {}));
function requireNovelSiteClass(siteID) {
    if (!(siteID in EnumNovelSiteList)) {
        throw new RangeError(`'${siteID}' not exists`);
    }
    return require(`./site/${EnumNovelSiteList[siteID]}`).default;
}
exports.requireNovelSiteClass = requireNovelSiteClass;
exports.default = requireNovelSiteClass;
//# sourceMappingURL=data:application/json;base64,