"use strict";
/**
 * Created by user on 2018/2/9/009.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request-promise");
const Promise = require("bluebird");
function retryRequest(url, options = {}) {
    options = Object.assign({
        retry: 3,
        delay: 1000,
    }, options);
    let retry = options.retry || 3;
    let libRequest = options.libRequest || request;
    let tries = 0;
    if (url.href) {
        url = url.href;
    }
    //console.log(url, options);
    function fn() {
        tries++;
        // @ts-ignore
        return libRequest(url.toString(), options)
            .catch(function (err) {
            if (retry-- > 0) {
                console.warn(`fetch fail(${tries}), will wait ${options.delay}ms, for try again\n${url}`);
                return Promise.delay(options.delay).then(fn);
            }
            err.tries = tries;
            return Promise.reject(err);
        });
    }
    return Promise.resolve().then(function () {
        return fn();
    }).tapCatch(function (err) {
        console.error(err);
    });
}
exports.retryRequest = retryRequest;
function manyRequest(url_arr, options = {}) {
    options = Object.assign({
        retry: 3,
        delay: 1000,
    }, options);
    let libRequest = options.libRequest || request;
    return Promise
        .mapSeries(url_arr, function (url) {
        if (url.href) {
            url = url.href;
        }
        // @ts-ignore
        return libRequest(url.toString(), options);
    })
        .tapCatch(function (err) {
        console.error(err);
    });
}
exports.manyRequest = manyRequest;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsMkNBQTJDO0FBQzNDLG9DQUFvQztBQWVwQyxTQUFnQixZQUFZLENBQUMsR0FBRyxFQUFFLFVBQW9CLEVBQUU7SUFFdkQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7UUFDUixLQUFLLEVBQUUsSUFBSTtLQUNYLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFWixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQztJQUUvQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFFZCxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQ1o7UUFDQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztLQUNmO0lBRUQsNEJBQTRCO0lBRTVCLFNBQVMsRUFBRTtRQUVWLEtBQUssRUFBRSxDQUFDO1FBRVIsYUFBYTtRQUNiLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLENBQUM7YUFDeEMsS0FBSyxDQUFDLFVBQVUsR0FBRztZQUVuQixJQUFJLEtBQUssRUFBRSxHQUFHLENBQUMsRUFDZjtnQkFDQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxnQkFBZ0IsT0FBTyxDQUFDLEtBQUssc0JBQXNCLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBRTFGLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdDO1lBRUQsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFFbEIsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUNEO0lBQ0gsQ0FBQztJQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztRQUU3QixPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQ2IsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRztRQUV4QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWhERCxvQ0FnREM7QUFFRCxTQUFnQixXQUFXLENBQUMsT0FBYyxFQUFFLFVBQW9CLEVBQUU7SUFFakUsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdkIsS0FBSyxFQUFFLENBQUM7UUFDUixLQUFLLEVBQUUsSUFBSTtLQUNYLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFWixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQztJQUUvQyxPQUFPLE9BQU87U0FDWixTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsR0FBRztRQUVoQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQ1o7WUFDQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztTQUNmO1FBRUQsYUFBYTtRQUNiLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7U0FDRCxRQUFRLENBQUMsVUFBVSxHQUFHO1FBRXRCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQ0Q7QUFDSCxDQUFDO0FBekJELGtDQXlCQztBQUVELGtCQUFlLE9BQW1DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzIvOS8wMDkuXG4gKi9cblxuaW1wb3J0ICogYXMgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5cbi8vaW1wb3J0IGZldGNoIGZyb20gJ2xldHMtZmV0Y2gnO1xuLy9mZXRjaC5yZXRyeSgodHJpZXMpID0+IHRyaWVzIDw9IDMpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElPcHRpb25zIGV4dGVuZHMgcmVxdWVzdC5SZXF1ZXN0UHJvbWlzZU9wdGlvbnNcbntcblx0cmV0cnk/OiBudW1iZXIsXG5cdGRlbGF5PzogbnVtYmVyLFxuXG5cdGphcj8sXG5cblx0bGliUmVxdWVzdD86ICh1cmw6IHN0cmluZywgb3B0aW9ucz86IElPcHRpb25zKSA9PiByZXF1ZXN0LlJlcXVlc3RQcm9taXNlLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmV0cnlSZXF1ZXN0KHVybCwgb3B0aW9uczogSU9wdGlvbnMgPSB7fSlcbntcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdHJldHJ5OiAzLFxuXHRcdGRlbGF5OiAxMDAwLFxuXHR9LCBvcHRpb25zKTtcblxuXHRsZXQgcmV0cnkgPSBvcHRpb25zLnJldHJ5IHx8IDM7XG5cdGxldCBsaWJSZXF1ZXN0ID0gb3B0aW9ucy5saWJSZXF1ZXN0IHx8IHJlcXVlc3Q7XG5cblx0bGV0IHRyaWVzID0gMDtcblxuXHRpZiAodXJsLmhyZWYpXG5cdHtcblx0XHR1cmwgPSB1cmwuaHJlZjtcblx0fVxuXG5cdC8vY29uc29sZS5sb2codXJsLCBvcHRpb25zKTtcblxuXHRmdW5jdGlvbiBmbigpXG5cdHtcblx0XHR0cmllcysrO1xuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBsaWJSZXF1ZXN0KHVybC50b1N0cmluZygpLCBvcHRpb25zKVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnIpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChyZXRyeS0tID4gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihgZmV0Y2ggZmFpbCgke3RyaWVzfSksIHdpbGwgd2FpdCAke29wdGlvbnMuZGVsYXl9bXMsIGZvciB0cnkgYWdhaW5cXG4ke3VybH1gKTtcblxuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLmRlbGF5KG9wdGlvbnMuZGVsYXkpLnRoZW4oZm4pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZXJyLnRyaWVzID0gdHJpZXM7XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG5cdFx0XHR9KVxuXHRcdFx0O1xuXHR9XG5cblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiBmbigpO1xuXHR9KS50YXBDYXRjaChmdW5jdGlvbiAoZXJyKVxuXHR7XG5cdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hbnlSZXF1ZXN0KHVybF9hcnI6IGFueVtdLCBvcHRpb25zOiBJT3B0aW9ucyA9IHt9KVxue1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0cmV0cnk6IDMsXG5cdFx0ZGVsYXk6IDEwMDAsXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGxldCBsaWJSZXF1ZXN0ID0gb3B0aW9ucy5saWJSZXF1ZXN0IHx8IHJlcXVlc3Q7XG5cblx0cmV0dXJuIFByb21pc2Vcblx0XHQubWFwU2VyaWVzKHVybF9hcnIsIGZ1bmN0aW9uICh1cmwpXG5cdFx0e1xuXHRcdFx0aWYgKHVybC5ocmVmKVxuXHRcdFx0e1xuXHRcdFx0XHR1cmwgPSB1cmwuaHJlZjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0cmV0dXJuIGxpYlJlcXVlc3QodXJsLnRvU3RyaW5nKCksIG9wdGlvbnMpO1xuXHRcdH0pXG5cdFx0LnRhcENhdGNoKGZ1bmN0aW9uIChlcnIpXG5cdFx0e1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vZmV0Y2gnKTtcblxuIl19