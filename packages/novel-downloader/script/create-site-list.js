"use strict";
/**
 * Created by user on 2019/1/3/003.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fg = require("fast-glob");
const path = require("path");
const fs = require("fs-extra");
fg.async([
    '*/**.ts',
], {
    cwd: path.join(__dirname, '..', 'src/site'),
    ignore: [
        '**/*.d.ts',
    ],
})
    .then(function (ls) {
    //console.log(ls);
    return ls.sort().reduce(function (a, b) {
        b = b.replace(/\.ts$/, '');
        let basename = path.basename(b);
        let ds = b.split('/');
        let id;
        if (basename == 'index') {
            ds.pop();
        }
        let b2 = ds.join('/');
        ds = ds.map(function (s) {
            return s.replace(/^[a-z]/, function (s) {
                return s.toUpperCase();
            });
        });
        id = [
            'NovelSite',
        ].concat(ds).join('');
        a.push([id, b2]);
        return a;
    }, []);
})
    .then(ls => {
    //console.log(ls);
    let ret = [];
    let s;
    s = `import _NovelSite from './site';\nimport Bluebird = require("bluebird");`;
    ret.push(s);
    s = `export enum EnumNovelSiteList
{
	${ls.map(([k, v]) => `${k} = './site/${v}',`).join('\n\t')}
	${ls.map(([k, v]) => `'${v}' = './site/${v}',`).join('\n\t')}
	${ls.map(([k, v]) => `'./site/${v}' = './site/${v}',`).join('\n\t')}
}`;
    ret.push(s);
    s = `export interface INovelSiteList
{
	${ls.map(([k, v]) => `${k}: typeof import('./site/${v}').default`).join('\n\t')}
}`;
    ret.push(s);
    s = ls.map(([k, v]) => `export function requireNovelSiteClass(siteID: EnumNovelSiteList.${k} | '${v}'): INovelSiteList["${k}"]\n`).join('');
    s += `export function requireNovelSiteClass\<T extends typeof _NovelSite\>(siteID: EnumNovelSiteList | string): T
export function requireNovelSiteClass(siteID: EnumNovelSiteList | string)
{
	if (!(siteID in EnumNovelSiteList))
	{
		throw new RangeError(\`'\${siteID}' not exists\`);
	}
	return require(EnumNovelSiteList[siteID]).default
}`;
    ret.push(s);
    s = `export default requireNovelSiteClass`;
    ret.push(s);
    ret.push('');
    return fs.writeFile(path.join(__dirname, '..', 'src/all.ts'), ret.join('\n\n'));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNpdGUtbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZS1zaXRlLWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILGdDQUFpQztBQUNqQyw2QkFBOEI7QUFDOUIsK0JBQWdDO0FBRWhDLEVBQUUsQ0FBQyxLQUFLLENBQVM7SUFDaEIsU0FBUztDQUNULEVBQUU7SUFDRixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQztJQUMzQyxNQUFNLEVBQUU7UUFDUCxXQUFXO0tBQ1g7Q0FDRCxDQUFDO0tBQ0EsSUFBSSxDQUFDLFVBQVUsRUFBRTtJQUVqQixrQkFBa0I7SUFFbEIsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFFckMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTNCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0QixJQUFJLEVBQVUsQ0FBQztRQUVmLElBQUksUUFBUSxJQUFJLE9BQU8sRUFDdkI7WUFDQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDVDtRQUVELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBRXRCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDO2dCQUVyQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxHQUFHO1lBQ0osV0FBVztTQUNYLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV0QixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFakIsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDUCxDQUFDLENBQUM7S0FDRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDVixrQkFBa0I7SUFFbEIsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFDO0lBRXZCLElBQUksQ0FBUyxDQUFDO0lBRWQsQ0FBQyxHQUFHLDBFQUEwRSxDQUFDO0lBRS9FLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixDQUFDLEdBQUc7O0dBRUgsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDeEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDMUQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7RUFDbEUsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixDQUFDLEdBQUc7O0dBRUgsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUM5RSxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVaLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLG1FQUFtRSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFNUksQ0FBQyxJQUFJOzs7Ozs7OztFQVFMLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRVosQ0FBQyxHQUFHLHNDQUFzQyxDQUFDO0lBRTNDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDakYsQ0FBQyxDQUFDLENBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzEvMy8wMDMuXG4gKi9cblxuaW1wb3J0IGZnID0gcmVxdWlyZShcImZhc3QtZ2xvYlwiKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5pbXBvcnQgZnMgPSByZXF1aXJlKFwiZnMtZXh0cmFcIik7XG5cbmZnLmFzeW5jPHN0cmluZz4oW1xuXHQnKi8qKi50cycsXG5dLCB7XG5cdGN3ZDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3NyYy9zaXRlJyksXG5cdGlnbm9yZTogW1xuXHRcdCcqKi8qLmQudHMnLFxuXHRdLFxufSlcblx0LnRoZW4oZnVuY3Rpb24gKGxzKVxuXHR7XG5cdFx0Ly9jb25zb2xlLmxvZyhscyk7XG5cblx0XHRyZXR1cm4gbHMuc29ydCgpLnJlZHVjZShmdW5jdGlvbiAoYSwgYilcblx0XHR7XG5cdFx0XHRiID0gYi5yZXBsYWNlKC9cXC50cyQvLCAnJyk7XG5cblx0XHRcdGxldCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoYik7XG5cdFx0XHRsZXQgZHMgPSBiLnNwbGl0KCcvJyk7XG5cblx0XHRcdGxldCBpZDogc3RyaW5nO1xuXG5cdFx0XHRpZiAoYmFzZW5hbWUgPT0gJ2luZGV4Jylcblx0XHRcdHtcblx0XHRcdFx0ZHMucG9wKCk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBiMiA9IGRzLmpvaW4oJy8nKTtcblxuXHRcdFx0ZHMgPSBkcy5tYXAoZnVuY3Rpb24gKHMpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBzLnJlcGxhY2UoL15bYS16XS8sIGZ1bmN0aW9uIChzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIHMudG9VcHBlckNhc2UoKTtcblx0XHRcdFx0fSlcblx0XHRcdH0pO1xuXG5cdFx0XHRpZCA9IFtcblx0XHRcdFx0J05vdmVsU2l0ZScsXG5cdFx0XHRdLmNvbmNhdChkcykuam9pbignJyk7XG5cblx0XHRcdGEucHVzaChbaWQsIGIyXSk7XG5cblx0XHRcdHJldHVybiBhO1xuXHRcdH0sIFtdKVxuXHR9KVxuXHQudGhlbihscyA9PiB7XG5cdFx0Ly9jb25zb2xlLmxvZyhscyk7XG5cblx0XHRsZXQgcmV0OiBzdHJpbmdbXSA9IFtdO1xuXG5cdFx0bGV0IHM6IHN0cmluZztcblxuXHRcdHMgPSBgaW1wb3J0IF9Ob3ZlbFNpdGUgZnJvbSAnLi9zaXRlJztcXG5pbXBvcnQgQmx1ZWJpcmQgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7YDtcblxuXHRcdHJldC5wdXNoKHMpO1xuXG5cdFx0cyA9IGBleHBvcnQgZW51bSBFbnVtTm92ZWxTaXRlTGlzdFxue1xuXHQke2xzLm1hcCgoW2ssIHZdKSA9PiBgJHtrfSA9ICcuL3NpdGUvJHt2fScsYCkuam9pbignXFxuXFx0Jyl9XG5cdCR7bHMubWFwKChbaywgdl0pID0+IGAnJHt2fScgPSAnLi9zaXRlLyR7dn0nLGApLmpvaW4oJ1xcblxcdCcpfVxuXHQke2xzLm1hcCgoW2ssIHZdKSA9PiBgJy4vc2l0ZS8ke3Z9JyA9ICcuL3NpdGUvJHt2fScsYCkuam9pbignXFxuXFx0Jyl9XG59YDtcblxuXHRcdHJldC5wdXNoKHMpO1xuXG5cdFx0cyA9IGBleHBvcnQgaW50ZXJmYWNlIElOb3ZlbFNpdGVMaXN0XG57XG5cdCR7bHMubWFwKChbaywgdl0pID0+IGAke2t9OiB0eXBlb2YgaW1wb3J0KCcuL3NpdGUvJHt2fScpLmRlZmF1bHRgKS5qb2luKCdcXG5cXHQnKX1cbn1gO1xuXG5cdFx0cmV0LnB1c2gocyk7XG5cblx0XHRzID0gbHMubWFwKChbaywgdl0pID0+IGBleHBvcnQgZnVuY3Rpb24gcmVxdWlyZU5vdmVsU2l0ZUNsYXNzKHNpdGVJRDogRW51bU5vdmVsU2l0ZUxpc3QuJHtrfSB8ICcke3Z9Jyk6IElOb3ZlbFNpdGVMaXN0W1wiJHtrfVwiXVxcbmApLmpvaW4oJycpO1xuXG5cdFx0cyArPSBgZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVOb3ZlbFNpdGVDbGFzc1xcPFQgZXh0ZW5kcyB0eXBlb2YgX05vdmVsU2l0ZVxcPihzaXRlSUQ6IEVudW1Ob3ZlbFNpdGVMaXN0IHwgc3RyaW5nKTogVFxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVOb3ZlbFNpdGVDbGFzcyhzaXRlSUQ6IEVudW1Ob3ZlbFNpdGVMaXN0IHwgc3RyaW5nKVxue1xuXHRpZiAoIShzaXRlSUQgaW4gRW51bU5vdmVsU2l0ZUxpc3QpKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoXFxgJ1xcJHtzaXRlSUR9JyBub3QgZXhpc3RzXFxgKTtcblx0fVxuXHRyZXR1cm4gcmVxdWlyZShFbnVtTm92ZWxTaXRlTGlzdFtzaXRlSURdKS5kZWZhdWx0XG59YDtcblxuXHRcdHJldC5wdXNoKHMpO1xuXG5cdFx0cyA9IGBleHBvcnQgZGVmYXVsdCByZXF1aXJlTm92ZWxTaXRlQ2xhc3NgO1xuXG5cdFx0cmV0LnB1c2gocyk7XG5cblx0XHRyZXQucHVzaCgnJyk7XG5cblx0XHRyZXR1cm4gZnMud3JpdGVGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICdzcmMvYWxsLnRzJyksIHJldC5qb2luKCdcXG5cXG4nKSk7XG5cdH0pXG47XG4iXX0=