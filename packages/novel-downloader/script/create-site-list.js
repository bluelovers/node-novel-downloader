"use strict";
/**
 * Created by user on 2019/1/3/003.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fg = require("@bluelovers/fast-glob");
const path = require("path");
const fs = require("fs-extra");
const Bluebird = require("bluebird");
const array_hyper_unique_1 = require("array-hyper-unique");
fg.async([
    '*/**.ts',
], {
    cwd: path.join(__dirname, '..', 'src/site'),
    ignore: [
        '**/*.d.ts',
    ],
})
    .then(function (ls) {
    //console.log(ls);
    return ls.sort().reduce(function (a, b) {
        b = b.replace(/\.ts$/, '');
        let basename = path.basename(b);
        let ds = b.split('/');
        let id;
        if (basename == 'index') {
            ds.pop();
        }
        let b2 = ds.join('/');
        ds = ds.map(function (s) {
            return s.replace(/^[a-z]/, function (s) {
                return s.toUpperCase();
            });
        });
        id = [
            'NovelSite',
        ].concat(ds).join('');
        a.push([id, b2]);
        return a;
    }, []);
})
    .then(async (ls) => {
    //console.log(ls);
    let ret = [''];
    let s;
    s = `export enum EnumNovelSiteList
{
	${ls.map(([k, v]) => `${k} = '${v}',`).join('\n\t')}
	${ls.map(([k, v]) => `'${v}' = '${v}',`).join('\n\t')}
	${ls.map(([k, v]) => `'./site/${v}' = '${v}',`).join('\n\t')}
}`;
    ret.push(s);
    s = `export type EnumNovelSiteListString = '${array_hyper_unique_1.array_unique(ls.map(([k, v]) => v)).join('\' | \'')}';`;
    ret.push(s);
    s = ``;
    await Bluebird.resolve(ls)
        .reduce(async (a, [k, v]) => {
        let IDKEY = await Promise.resolve().then(() => require(`../src/site/${v}`)).then(m => m.default.IDKEY)
            .catch(e => null);
        if (IDKEY) {
            a[0].push(`${k} = '${IDKEY}',`);
            a[1].push(`'${v}' = '${IDKEY}',`);
            a[1].push(`'${IDKEY}' = '${IDKEY}',`);
            a[2].push(`'./site/${v}' = '${IDKEY}',`);
            a[3].push(IDKEY);
        }
        return a;
    }, [[], [], [], []])
        .then(a => {
        array_hyper_unique_1.array_unique_overwrite(a[0]);
        array_hyper_unique_1.array_unique_overwrite(a[1]);
        array_hyper_unique_1.array_unique_overwrite(a[2]);
        let s = `export enum EnumIDKEYList
{
	${a[0].join('\n\t')}
	${a[1].join('\n\t')}
	${a[2].join('\n\t')}
}`;
        ret.push(s);
        s = `export type EnumIDKEYListString = '${array_hyper_unique_1.array_unique(a[3]).join('\' | \'')}';`;
        ret.push(s);
    });
    s = `export interface INovelSiteList
{
	${ls.map(([k, v]) => `${k}: typeof import('../site/${v}').default`).join('\n\t')}
}`;
    ret.push(s);
    await fs.writeFile(path.join(__dirname, '..', 'src/all/const.ts'), ret.join('\n\n'));
    ret = [];
    s = `import _NovelSite from './site';\nimport Bluebird = require("bluebird");`;
    ret.push(s);
    ret.push(`import { EnumNovelSiteList, INovelSiteList } from './all/const';`);
    ret.push(`export { EnumNovelSiteList, INovelSiteList }`);
    s = ls.map(([k, v]) => `export function requireNovelSiteClass(siteID: EnumNovelSiteList.${k} | '${v}'): INovelSiteList["${k}"]\n`).join('');
    s += `export function requireNovelSiteClass\<T extends typeof _NovelSite\>(siteID: EnumNovelSiteList | string): T
export function requireNovelSiteClass(siteID: EnumNovelSiteList | string)
{
	if (!(siteID in EnumNovelSiteList))
	{
		throw new RangeError(\`'\${siteID}' not exists\`);
	}
	return require(\`./site/\$\{EnumNovelSiteList[siteID]\}\`).default
}`;
    ret.push(s);
    s = `export default requireNovelSiteClass`;
    ret.push(s);
    ret.push('');
    return fs.writeFile(path.join(__dirname, '..', 'src/all.ts'), ret.join('\n\n'));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNpdGUtbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZS1zaXRlLWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILDRDQUE2QztBQUM3Qyw2QkFBOEI7QUFDOUIsK0JBQWdDO0FBQ2hDLHFDQUFzQztBQUN0QywyREFBMEU7QUFFMUUsRUFBRSxDQUFDLEtBQUssQ0FBUztJQUNoQixTQUFTO0NBQ1QsRUFBRTtJQUNGLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDO0lBQzNDLE1BQU0sRUFBRTtRQUNQLFdBQVc7S0FDWDtDQUNELENBQUM7S0FDQSxJQUFJLENBQUMsVUFBVSxFQUFFO0lBRWpCLGtCQUFrQjtJQUVsQixPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUVyQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFM0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRCLElBQUksRUFBVSxDQUFDO1FBRWYsSUFBSSxRQUFRLElBQUksT0FBTyxFQUN2QjtZQUNDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNUO1FBRUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0QixFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7WUFFdEIsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUM7Z0JBRXJDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLEdBQUc7WUFDSixXQUFXO1NBQ1gsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXRCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVqQixPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNQLENBQUMsQ0FBQztLQUNELElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDbEIsa0JBQWtCO0lBRWxCLElBQUksR0FBRyxHQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFekIsSUFBSSxDQUFTLENBQUM7SUFFZCxDQUFDLEdBQUc7O0dBRUgsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDbkQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7RUFDM0QsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixDQUFDLEdBQUcsMENBQTBDLGlDQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBRXRHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRVAsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztTQUN4QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1FBRTNCLElBQUksS0FBSyxHQUFHLE1BQU0scUNBQU8sZUFBZSxDQUFDLEVBQUUsR0FDekMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7YUFDMUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ2pCO1FBRUQsSUFBSSxLQUFLLEVBQ1Q7WUFDQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUN0QyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUM7WUFFekMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQjtRQUVELE9BQU8sQ0FBQyxDQUFBO0lBQ1QsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDbkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBRVQsMkNBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsMkNBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsMkNBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0IsSUFBSSxDQUFDLEdBQUc7O0dBRVQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7RUFDbEIsQ0FBQztRQUVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFWixDQUFDLEdBQUcsc0NBQXNDLGlDQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFFakYsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUViLENBQUMsQ0FBQyxDQUNGO0lBRUQsQ0FBQyxHQUFHOztHQUVILEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7RUFDL0UsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRXJGLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFFVCxDQUFDLEdBQUcsMEVBQTBFLENBQUM7SUFFL0UsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVaLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0VBQWtFLENBQUMsQ0FBQztJQUM3RSxHQUFHLENBQUMsSUFBSSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFFekQsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsbUVBQW1FLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU1SSxDQUFDLElBQUk7Ozs7Ozs7O0VBUUwsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWixDQUFDLEdBQUcsc0NBQXNDLENBQUM7SUFFM0MsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVaLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFYixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNqRixDQUFDLENBQUMsQ0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvMS8zLzAwMy5cbiAqL1xuXG5pbXBvcnQgZmcgPSByZXF1aXJlKFwiQGJsdWVsb3ZlcnMvZmFzdC1nbG9iXCIpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoXCJmcy1leHRyYVwiKTtcbmltcG9ydCBCbHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcbmltcG9ydCB7IGFycmF5X3VuaXF1ZV9vdmVyd3JpdGUsIGFycmF5X3VuaXF1ZSB9IGZyb20gJ2FycmF5LWh5cGVyLXVuaXF1ZSc7XG5cbmZnLmFzeW5jPHN0cmluZz4oW1xuXHQnKi8qKi50cycsXG5dLCB7XG5cdGN3ZDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3NyYy9zaXRlJyksXG5cdGlnbm9yZTogW1xuXHRcdCcqKi8qLmQudHMnLFxuXHRdLFxufSlcblx0LnRoZW4oZnVuY3Rpb24gKGxzKVxuXHR7XG5cdFx0Ly9jb25zb2xlLmxvZyhscyk7XG5cblx0XHRyZXR1cm4gbHMuc29ydCgpLnJlZHVjZShmdW5jdGlvbiAoYSwgYilcblx0XHR7XG5cdFx0XHRiID0gYi5yZXBsYWNlKC9cXC50cyQvLCAnJyk7XG5cblx0XHRcdGxldCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoYik7XG5cdFx0XHRsZXQgZHMgPSBiLnNwbGl0KCcvJyk7XG5cblx0XHRcdGxldCBpZDogc3RyaW5nO1xuXG5cdFx0XHRpZiAoYmFzZW5hbWUgPT0gJ2luZGV4Jylcblx0XHRcdHtcblx0XHRcdFx0ZHMucG9wKCk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBiMiA9IGRzLmpvaW4oJy8nKTtcblxuXHRcdFx0ZHMgPSBkcy5tYXAoZnVuY3Rpb24gKHMpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBzLnJlcGxhY2UoL15bYS16XS8sIGZ1bmN0aW9uIChzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIHMudG9VcHBlckNhc2UoKTtcblx0XHRcdFx0fSlcblx0XHRcdH0pO1xuXG5cdFx0XHRpZCA9IFtcblx0XHRcdFx0J05vdmVsU2l0ZScsXG5cdFx0XHRdLmNvbmNhdChkcykuam9pbignJyk7XG5cblx0XHRcdGEucHVzaChbaWQsIGIyXSk7XG5cblx0XHRcdHJldHVybiBhO1xuXHRcdH0sIFtdKVxuXHR9KVxuXHQudGhlbihhc3luYyAobHMpID0+IHtcblx0XHQvL2NvbnNvbGUubG9nKGxzKTtcblxuXHRcdGxldCByZXQ6IHN0cmluZ1tdID0gWycnXTtcblxuXHRcdGxldCBzOiBzdHJpbmc7XG5cblx0XHRzID0gYGV4cG9ydCBlbnVtIEVudW1Ob3ZlbFNpdGVMaXN0XG57XG5cdCR7bHMubWFwKChbaywgdl0pID0+IGAke2t9ID0gJyR7dn0nLGApLmpvaW4oJ1xcblxcdCcpfVxuXHQke2xzLm1hcCgoW2ssIHZdKSA9PiBgJyR7dn0nID0gJyR7dn0nLGApLmpvaW4oJ1xcblxcdCcpfVxuXHQke2xzLm1hcCgoW2ssIHZdKSA9PiBgJy4vc2l0ZS8ke3Z9JyA9ICcke3Z9JyxgKS5qb2luKCdcXG5cXHQnKX1cbn1gO1xuXG5cdFx0cmV0LnB1c2gocyk7XG5cblx0XHRzID0gYGV4cG9ydCB0eXBlIEVudW1Ob3ZlbFNpdGVMaXN0U3RyaW5nID0gJyR7YXJyYXlfdW5pcXVlKGxzLm1hcCgoW2ssIHZdKSA9PiB2KSkuam9pbignXFwnIHwgXFwnJyl9JztgO1xuXG5cdFx0cmV0LnB1c2gocyk7XG5cblx0XHRzID0gYGA7XG5cblx0XHRhd2FpdCBCbHVlYmlyZC5yZXNvbHZlKGxzKVxuXHRcdFx0LnJlZHVjZShhc3luYyAoYSwgW2ssIHZdKSA9PiB7XG5cblx0XHRcdFx0bGV0IElES0VZID0gYXdhaXQgaW1wb3J0KGAuLi9zcmMvc2l0ZS8ke3Z9YClcblx0XHRcdFx0XHQudGhlbihtID0+IG0uZGVmYXVsdC5JREtFWSlcblx0XHRcdFx0XHQuY2F0Y2goZSA9PiBudWxsKVxuXHRcdFx0XHQ7XG5cblx0XHRcdFx0aWYgKElES0VZKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0YVswXS5wdXNoKGAke2t9ID0gJyR7SURLRVl9JyxgKTtcblx0XHRcdFx0XHRhWzFdLnB1c2goYCcke3Z9JyA9ICcke0lES0VZfScsYCk7XG5cdFx0XHRcdFx0YVsxXS5wdXNoKGAnJHtJREtFWX0nID0gJyR7SURLRVl9JyxgKTtcblx0XHRcdFx0XHRhWzJdLnB1c2goYCcuL3NpdGUvJHt2fScgPSAnJHtJREtFWX0nLGApO1xuXG5cdFx0XHRcdFx0YVszXS5wdXNoKElES0VZKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhXG5cdFx0XHR9LCBbW10sIFtdLCBbXSwgW11dKVxuXHRcdFx0LnRoZW4oYSA9PiB7XG5cblx0XHRcdFx0YXJyYXlfdW5pcXVlX292ZXJ3cml0ZShhWzBdKTtcblx0XHRcdFx0YXJyYXlfdW5pcXVlX292ZXJ3cml0ZShhWzFdKTtcblx0XHRcdFx0YXJyYXlfdW5pcXVlX292ZXJ3cml0ZShhWzJdKTtcblxuXHRcdFx0XHRsZXQgcyA9IGBleHBvcnQgZW51bSBFbnVtSURLRVlMaXN0XG57XG5cdCR7YVswXS5qb2luKCdcXG5cXHQnKX1cblx0JHthWzFdLmpvaW4oJ1xcblxcdCcpfVxuXHQke2FbMl0uam9pbignXFxuXFx0Jyl9XG59YDtcblxuXHRcdFx0XHRyZXQucHVzaChzKTtcblxuXHRcdFx0XHRzID0gYGV4cG9ydCB0eXBlIEVudW1JREtFWUxpc3RTdHJpbmcgPSAnJHthcnJheV91bmlxdWUoYVszXSkuam9pbignXFwnIHwgXFwnJyl9JztgO1xuXG5cdFx0XHRcdHJldC5wdXNoKHMpO1xuXG5cdFx0XHR9KVxuXHRcdDtcblxuXHRcdHMgPSBgZXhwb3J0IGludGVyZmFjZSBJTm92ZWxTaXRlTGlzdFxue1xuXHQke2xzLm1hcCgoW2ssIHZdKSA9PiBgJHtrfTogdHlwZW9mIGltcG9ydCgnLi4vc2l0ZS8ke3Z9JykuZGVmYXVsdGApLmpvaW4oJ1xcblxcdCcpfVxufWA7XG5cblx0XHRyZXQucHVzaChzKTtcblxuXHRcdGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnc3JjL2FsbC9jb25zdC50cycpLCByZXQuam9pbignXFxuXFxuJykpO1xuXG5cdFx0cmV0ID0gW107XG5cblx0XHRzID0gYGltcG9ydCBfTm92ZWxTaXRlIGZyb20gJy4vc2l0ZSc7XFxuaW1wb3J0IEJsdWViaXJkID0gcmVxdWlyZShcImJsdWViaXJkXCIpO2A7XG5cblx0XHRyZXQucHVzaChzKTtcblxuXHRcdHJldC5wdXNoKGBpbXBvcnQgeyBFbnVtTm92ZWxTaXRlTGlzdCwgSU5vdmVsU2l0ZUxpc3QgfSBmcm9tICcuL2FsbC9jb25zdCc7YCk7XG5cdFx0cmV0LnB1c2goYGV4cG9ydCB7IEVudW1Ob3ZlbFNpdGVMaXN0LCBJTm92ZWxTaXRlTGlzdCB9YCk7XG5cblx0XHRzID0gbHMubWFwKChbaywgdl0pID0+IGBleHBvcnQgZnVuY3Rpb24gcmVxdWlyZU5vdmVsU2l0ZUNsYXNzKHNpdGVJRDogRW51bU5vdmVsU2l0ZUxpc3QuJHtrfSB8ICcke3Z9Jyk6IElOb3ZlbFNpdGVMaXN0W1wiJHtrfVwiXVxcbmApLmpvaW4oJycpO1xuXG5cdFx0cyArPSBgZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVOb3ZlbFNpdGVDbGFzc1xcPFQgZXh0ZW5kcyB0eXBlb2YgX05vdmVsU2l0ZVxcPihzaXRlSUQ6IEVudW1Ob3ZlbFNpdGVMaXN0IHwgc3RyaW5nKTogVFxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVOb3ZlbFNpdGVDbGFzcyhzaXRlSUQ6IEVudW1Ob3ZlbFNpdGVMaXN0IHwgc3RyaW5nKVxue1xuXHRpZiAoIShzaXRlSUQgaW4gRW51bU5vdmVsU2l0ZUxpc3QpKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoXFxgJ1xcJHtzaXRlSUR9JyBub3QgZXhpc3RzXFxgKTtcblx0fVxuXHRyZXR1cm4gcmVxdWlyZShcXGAuL3NpdGUvXFwkXFx7RW51bU5vdmVsU2l0ZUxpc3Rbc2l0ZUlEXVxcfVxcYCkuZGVmYXVsdFxufWA7XG5cblx0XHRyZXQucHVzaChzKTtcblxuXHRcdHMgPSBgZXhwb3J0IGRlZmF1bHQgcmVxdWlyZU5vdmVsU2l0ZUNsYXNzYDtcblxuXHRcdHJldC5wdXNoKHMpO1xuXG5cdFx0cmV0LnB1c2goJycpO1xuXG5cdFx0cmV0dXJuIGZzLndyaXRlRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnc3JjL2FsbC50cycpLCByZXQuam9pbignXFxuXFxuJykpO1xuXHR9KVxuO1xuIl19